// Copyright 2020 ETH Zurich and University of Bologna.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Automatically generated by parse-opcodes.

/// The different instruction formats.
#[derive(Debug, Copy, Clone)]
pub enum Format {
    Illegal(u32),
    Unit(FormatUnit),
    Luimm5Imm5RdRs1(FormatLuimm5Imm5RdRs1),
    Luimm5RdRs1Rs2(FormatLuimm5RdRs1Rs2),
    AqrlRdRs1(FormatAqrlRdRs1),
    AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2),
    Bimm12hiBimm12loImm5Rs1(FormatBimm12hiBimm12loImm5Rs1),
    Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2),
    FmPredRdRs1Succ(FormatFmPredRdRs1Succ),
    Imm12Rd(FormatImm12Rd),
    Imm12RdRmRs1(FormatImm12RdRmRs1),
    Imm12RdRs1(FormatImm12RdRs1),
    Imm12Rs1(FormatImm12Rs1),
    Imm12Rs1StaggerMaskStaggerMax(FormatImm12Rs1StaggerMaskStaggerMax),
    Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2),
    Imm20Rd(FormatImm20Rd),
    Imm5Rd(FormatImm5Rd),
    Imm5RdRs1(FormatImm5RdRs1),
    Imm6RdRs1(FormatImm6RdRs1),
    Jimm20Rd(FormatJimm20Rd),
    RdRmRs1(FormatRdRmRs1),
    RdRmRs1Rs2(FormatRdRmRs1Rs2),
    RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3),
    RdRs1(FormatRdRs1),
    RdRs1Rs2(FormatRdRs1Rs2),
    RdRs1Shamt(FormatRdRs1Shamt),
    RdRs1Shamtw(FormatRdRs1Shamtw),
    RdRs2(FormatRdRs2),
    Rs1(FormatRs1),
    Rs1Rs2(FormatRs1Rs2),
}

impl Format {
    pub fn raw(&self) -> u32 {
        match self {
            Self::Illegal(x) => *x,
            Self::Unit(x) => x.raw,
            Self::Luimm5Imm5RdRs1(x) => x.raw,
            Self::Luimm5RdRs1Rs2(x) => x.raw,
            Self::AqrlRdRs1(x) => x.raw,
            Self::AqrlRdRs1Rs2(x) => x.raw,
            Self::Bimm12hiBimm12loImm5Rs1(x) => x.raw,
            Self::Bimm12hiBimm12loRs1Rs2(x) => x.raw,
            Self::FmPredRdRs1Succ(x) => x.raw,
            Self::Imm12Rd(x) => x.raw,
            Self::Imm12RdRmRs1(x) => x.raw,
            Self::Imm12RdRs1(x) => x.raw,
            Self::Imm12Rs1(x) => x.raw,
            Self::Imm12Rs1StaggerMaskStaggerMax(x) => x.raw,
            Self::Imm12hiImm12loRs1Rs2(x) => x.raw,
            Self::Imm20Rd(x) => x.raw,
            Self::Imm5Rd(x) => x.raw,
            Self::Imm5RdRs1(x) => x.raw,
            Self::Imm6RdRs1(x) => x.raw,
            Self::Jimm20Rd(x) => x.raw,
            Self::RdRmRs1(x) => x.raw,
            Self::RdRmRs1Rs2(x) => x.raw,
            Self::RdRmRs1Rs2Rs3(x) => x.raw,
            Self::RdRs1(x) => x.raw,
            Self::RdRs1Rs2(x) => x.raw,
            Self::RdRs1Shamt(x) => x.raw,
            Self::RdRs1Shamtw(x) => x.raw,
            Self::RdRs2(x) => x.raw,
            Self::Rs1(x) => x.raw,
            Self::Rs1Rs2(x) => x.raw,
        }
    }
}

impl std::fmt::Display for Format {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Illegal(x) => write!(f, "<illegal 0x{:x}>", x),
            Self::Unit(x) => write!(f, "{}", x),
            Self::Luimm5Imm5RdRs1(x) => write!(f, "{}", x),
            Self::Luimm5RdRs1Rs2(x) => write!(f, "{}", x),
            Self::AqrlRdRs1(x) => write!(f, "{}", x),
            Self::AqrlRdRs1Rs2(x) => write!(f, "{}", x),
            Self::Bimm12hiBimm12loImm5Rs1(x) => write!(f, "{}", x),
            Self::Bimm12hiBimm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::FmPredRdRs1Succ(x) => write!(f, "{}", x),
            Self::Imm12Rd(x) => write!(f, "{}", x),
            Self::Imm12RdRmRs1(x) => write!(f, "{}", x),
            Self::Imm12RdRs1(x) => write!(f, "{}", x),
            Self::Imm12Rs1(x) => write!(f, "{}", x),
            Self::Imm12Rs1StaggerMaskStaggerMax(x) => write!(f, "{}", x),
            Self::Imm12hiImm12loRs1Rs2(x) => write!(f, "{}", x),
            Self::Imm20Rd(x) => write!(f, "{}", x),
            Self::Imm5Rd(x) => write!(f, "{}", x),
            Self::Imm5RdRs1(x) => write!(f, "{}", x),
            Self::Imm6RdRs1(x) => write!(f, "{}", x),
            Self::Jimm20Rd(x) => write!(f, "{}", x),
            Self::RdRmRs1(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRmRs1Rs2Rs3(x) => write!(f, "{}", x),
            Self::RdRs1(x) => write!(f, "{}", x),
            Self::RdRs1Rs2(x) => write!(f, "{}", x),
            Self::RdRs1Shamt(x) => write!(f, "{}", x),
            Self::RdRs1Shamtw(x) => write!(f, "{}", x),
            Self::RdRs2(x) => write!(f, "{}", x),
            Self::Rs1(x) => write!(f, "{}", x),
            Self::Rs1Rs2(x) => write!(f, "{}", x),
        }
    }
}

/// The `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatUnit {
    pub op: OpcodeUnit,
    pub raw: u32,
}

impl FormatUnit {}

/// Opcodes with the `Unit` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeUnit {
    Ecall,
    Ebreak,
    Uret,
    Sret,
    Mret,
    Dret,
    Wfi,
    CAddi4spn,
    CFld,
    CLw,
    CFlw,
    CFsd,
    CSw,
    CFsw,
    CAddi,
    CJal,
    CLi,
    CLui,
    CSrli,
    CSrai,
    CAndi,
    CSub,
    CXor,
    COr,
    CAnd,
    CJ,
    CBeqz,
    CBnez,
    CSlli,
    CFldsp,
    CLwsp,
    CFlwsp,
    CMv,
    CAdd,
    CFsdsp,
    CSwsp,
    CFswsp,
    CSubw,
    CAddw,
}

impl std::fmt::Display for FormatUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeUnit {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Ecall => write!(f, "ecall"),
            Self::Ebreak => write!(f, "ebreak"),
            Self::Uret => write!(f, "uret"),
            Self::Sret => write!(f, "sret"),
            Self::Mret => write!(f, "mret"),
            Self::Dret => write!(f, "dret"),
            Self::Wfi => write!(f, "wfi"),
            Self::CAddi4spn => write!(f, "c.addi4spn"),
            Self::CFld => write!(f, "c.fld"),
            Self::CLw => write!(f, "c.lw"),
            Self::CFlw => write!(f, "c.flw"),
            Self::CFsd => write!(f, "c.fsd"),
            Self::CSw => write!(f, "c.sw"),
            Self::CFsw => write!(f, "c.fsw"),
            Self::CAddi => write!(f, "c.addi"),
            Self::CJal => write!(f, "c.jal"),
            Self::CLi => write!(f, "c.li"),
            Self::CLui => write!(f, "c.lui"),
            Self::CSrli => write!(f, "c.srli"),
            Self::CSrai => write!(f, "c.srai"),
            Self::CAndi => write!(f, "c.andi"),
            Self::CSub => write!(f, "c.sub"),
            Self::CXor => write!(f, "c.xor"),
            Self::COr => write!(f, "c.or"),
            Self::CAnd => write!(f, "c.and"),
            Self::CJ => write!(f, "c.j"),
            Self::CBeqz => write!(f, "c.beqz"),
            Self::CBnez => write!(f, "c.bnez"),
            Self::CSlli => write!(f, "c.slli"),
            Self::CFldsp => write!(f, "c.fldsp"),
            Self::CLwsp => write!(f, "c.lwsp"),
            Self::CFlwsp => write!(f, "c.flwsp"),
            Self::CMv => write!(f, "c.mv"),
            Self::CAdd => write!(f, "c.add"),
            Self::CFsdsp => write!(f, "c.fsdsp"),
            Self::CSwsp => write!(f, "c.swsp"),
            Self::CFswsp => write!(f, "c.fswsp"),
            Self::CSubw => write!(f, "c.subw"),
            Self::CAddw => write!(f, "c.addw"),
        }
    }
}

/// The `Luimm5Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatLuimm5Imm5RdRs1 {
    pub op: OpcodeLuimm5Imm5RdRs1,
    pub raw: u32,
    pub luimm5: u32,
    pub imm5: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatLuimm5Imm5RdRs1 {}

/// Opcodes with the `Luimm5Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeLuimm5Imm5RdRs1 {
    PExtract,
    PExtractu,
    PInsert,
    PBset,
    PBclr,
}

impl std::fmt::Display for FormatLuimm5Imm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " Luimm5={:x}", self.luimm5)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeLuimm5Imm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PExtract => write!(f, "p.extract"),
            Self::PExtractu => write!(f, "p.extractu"),
            Self::PInsert => write!(f, "p.insert"),
            Self::PBset => write!(f, "p.bset"),
            Self::PBclr => write!(f, "p.bclr"),
        }
    }
}

/// The `Luimm5RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatLuimm5RdRs1Rs2 {
    pub op: OpcodeLuimm5RdRs1Rs2,
    pub raw: u32,
    pub luimm5: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatLuimm5RdRs1Rs2 {}

/// Opcodes with the `Luimm5RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeLuimm5RdRs1Rs2 {
    PAddn,
    PAddun,
}

impl std::fmt::Display for FormatLuimm5RdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " Luimm5={:x}", self.luimm5)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeLuimm5RdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PAddn => write!(f, "p.addN"),
            Self::PAddun => write!(f, "p.adduN"),
        }
    }
}

/// The `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1 {
    pub op: OpcodeAqrlRdRs1,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatAqrlRdRs1 {}

/// Opcodes with the `AqrlRdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1 {
    LrW,
    LrD,
}

impl std::fmt::Display for FormatAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::LrW => write!(f, "lr.w"),
            Self::LrD => write!(f, "lr.d"),
        }
    }
}

/// The `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatAqrlRdRs1Rs2 {
    pub op: OpcodeAqrlRdRs1Rs2,
    pub raw: u32,
    pub aqrl: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatAqrlRdRs1Rs2 {}

/// Opcodes with the `AqrlRdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeAqrlRdRs1Rs2 {
    AmoaddW,
    AmoxorW,
    AmoorW,
    AmoandW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    AmoswapW,
    ScW,
    AmoaddD,
    AmoxorD,
    AmoorD,
    AmoandD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
    AmoswapD,
    ScD,
}

impl std::fmt::Display for FormatAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " aqrl={:x}", self.aqrl)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeAqrlRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AmoaddW => write!(f, "amoadd.w"),
            Self::AmoxorW => write!(f, "amoxor.w"),
            Self::AmoorW => write!(f, "amoor.w"),
            Self::AmoandW => write!(f, "amoand.w"),
            Self::AmominW => write!(f, "amomin.w"),
            Self::AmomaxW => write!(f, "amomax.w"),
            Self::AmominuW => write!(f, "amominu.w"),
            Self::AmomaxuW => write!(f, "amomaxu.w"),
            Self::AmoswapW => write!(f, "amoswap.w"),
            Self::ScW => write!(f, "sc.w"),
            Self::AmoaddD => write!(f, "amoadd.d"),
            Self::AmoxorD => write!(f, "amoxor.d"),
            Self::AmoorD => write!(f, "amoor.d"),
            Self::AmoandD => write!(f, "amoand.d"),
            Self::AmominD => write!(f, "amomin.d"),
            Self::AmomaxD => write!(f, "amomax.d"),
            Self::AmominuD => write!(f, "amominu.d"),
            Self::AmomaxuD => write!(f, "amomaxu.d"),
            Self::AmoswapD => write!(f, "amoswap.d"),
            Self::ScD => write!(f, "sc.d"),
        }
    }
}

/// The `Bimm12hiBimm12loImm5Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatBimm12hiBimm12loImm5Rs1 {
    pub op: OpcodeBimm12hiBimm12loImm5Rs1,
    pub raw: u32,
    pub bimm12hi: u32,
    pub bimm12lo: u32,
    pub imm5: u32,
    pub rs1: u32,
}

impl FormatBimm12hiBimm12loImm5Rs1 {
    pub fn bimm(&self) -> i32 {
        (((((self.bimm12lo >> 0) & 0x1) << 11
            | ((self.bimm12lo >> 1) & 0xf) << 1
            | ((self.bimm12hi >> 0) & 0x3f) << 5
            | ((self.bimm12hi >> 6) & 0x1) << 12)
            << 19) as i32)
            >> 19
    }
}

/// Opcodes with the `Bimm12hiBimm12loImm5Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeBimm12hiBimm12loImm5Rs1 {
    PBeqimm,
    PBneimm,
}

impl std::fmt::Display for FormatBimm12hiBimm12loImm5Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " bimm12hi={:x}", self.bimm12hi)?;
        write!(f, " bimm12lo={:x}", self.bimm12lo)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeBimm12hiBimm12loImm5Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PBeqimm => write!(f, "p.beqimm"),
            Self::PBneimm => write!(f, "p.bneimm"),
        }
    }
}

/// The `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatBimm12hiBimm12loRs1Rs2 {
    pub op: OpcodeBimm12hiBimm12loRs1Rs2,
    pub raw: u32,
    pub bimm12hi: u32,
    pub bimm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatBimm12hiBimm12loRs1Rs2 {
    pub fn bimm(&self) -> i32 {
        (((((self.bimm12lo >> 0) & 0x1) << 11
            | ((self.bimm12lo >> 1) & 0xf) << 1
            | ((self.bimm12hi >> 0) & 0x3f) << 5
            | ((self.bimm12hi >> 6) & 0x1) << 12)
            << 19) as i32)
            >> 19
    }
}

/// Opcodes with the `Bimm12hiBimm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeBimm12hiBimm12loRs1Rs2 {
    Beq,
    Bne,
    Blt,
    Bge,
    Bltu,
    Bgeu,
}

impl std::fmt::Display for FormatBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " bimm12hi={:x}", self.bimm12hi)?;
        write!(f, " bimm12lo={:x}", self.bimm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeBimm12hiBimm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Beq => write!(f, "beq"),
            Self::Bne => write!(f, "bne"),
            Self::Blt => write!(f, "blt"),
            Self::Bge => write!(f, "bge"),
            Self::Bltu => write!(f, "bltu"),
            Self::Bgeu => write!(f, "bgeu"),
        }
    }
}

/// The `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatFmPredRdRs1Succ {
    pub op: OpcodeFmPredRdRs1Succ,
    pub raw: u32,
    pub fm: u32,
    pub pred: u32,
    pub rd: u32,
    pub rs1: u32,
    pub succ: u32,
}

impl FormatFmPredRdRs1Succ {}

/// Opcodes with the `FmPredRdRs1Succ` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeFmPredRdRs1Succ {
    Fence,
}

impl std::fmt::Display for FormatFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " fm={:x}", self.fm)?;
        write!(f, " pred={:x}", self.pred)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " succ={:x}", self.succ)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeFmPredRdRs1Succ {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fence => write!(f, "fence"),
        }
    }
}

/// The `Imm12Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rd {
    pub op: OpcodeImm12Rd,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
}

impl FormatImm12Rd {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rd {
    Scfgri,
}

impl std::fmt::Display for FormatImm12Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Scfgri => write!(f, "scfgri"),
        }
    }
}

/// The `Imm12RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12RdRmRs1 {
    pub op: OpcodeImm12RdRmRs1,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
}

impl FormatImm12RdRmRs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12RdRmRs1 {
    Irep,
}

impl std::fmt::Display for FormatImm12RdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12RdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Irep => write!(f, "irep"),
        }
    }
}

/// The `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12RdRs1 {
    pub op: OpcodeImm12RdRs1,
    pub raw: u32,
    pub imm12: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm12RdRs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12RdRs1 {
    Jalr,
    Addi,
    Slti,
    Sltiu,
    Xori,
    Ori,
    Andi,
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    FenceI,
    Addiw,
    Ld,
    Lwu,
    Flw,
    Fld,
    Flq,
    Csrrw,
    Csrrs,
    Csrrc,
    Csrrwi,
    Csrrsi,
    Csrrci,
    Flh,
    Flb,
}

impl std::fmt::Display for FormatImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jalr => write!(f, "jalr"),
            Self::Addi => write!(f, "addi"),
            Self::Slti => write!(f, "slti"),
            Self::Sltiu => write!(f, "sltiu"),
            Self::Xori => write!(f, "xori"),
            Self::Ori => write!(f, "ori"),
            Self::Andi => write!(f, "andi"),
            Self::Lb => write!(f, "lb"),
            Self::Lh => write!(f, "lh"),
            Self::Lw => write!(f, "lw"),
            Self::Lbu => write!(f, "lbu"),
            Self::Lhu => write!(f, "lhu"),
            Self::FenceI => write!(f, "fence.i"),
            Self::Addiw => write!(f, "addiw"),
            Self::Ld => write!(f, "ld"),
            Self::Lwu => write!(f, "lwu"),
            Self::Flw => write!(f, "flw"),
            Self::Fld => write!(f, "fld"),
            Self::Flq => write!(f, "flq"),
            Self::Csrrw => write!(f, "csrrw"),
            Self::Csrrs => write!(f, "csrrs"),
            Self::Csrrc => write!(f, "csrrc"),
            Self::Csrrwi => write!(f, "csrrwi"),
            Self::Csrrsi => write!(f, "csrrsi"),
            Self::Csrrci => write!(f, "csrrci"),
            Self::Flh => write!(f, "flh"),
            Self::Flb => write!(f, "flb"),
        }
    }
}

/// The `Imm12Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rs1 {
    pub op: OpcodeImm12Rs1,
    pub raw: u32,
    pub imm12: u32,
    pub rs1: u32,
}

impl FormatImm12Rs1 {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rs1 {
    Scfgwi,
}

impl std::fmt::Display for FormatImm12Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Scfgwi => write!(f, "scfgwi"),
        }
    }
}

/// The `Imm12Rs1StaggerMaskStaggerMax` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12Rs1StaggerMaskStaggerMax {
    pub op: OpcodeImm12Rs1StaggerMaskStaggerMax,
    pub raw: u32,
    pub imm12: u32,
    pub rs1: u32,
    pub stagger_mask: u32,
    pub stagger_max: u32,
}

impl FormatImm12Rs1StaggerMaskStaggerMax {
    pub fn imm(&self) -> i32 {
        ((self.imm12 << 20) as i32) >> 20
    }
}

/// Opcodes with the `Imm12Rs1StaggerMaskStaggerMax` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12Rs1StaggerMaskStaggerMax {
    FrepO,
    FrepI,
}

impl std::fmt::Display for FormatImm12Rs1StaggerMaskStaggerMax {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12={:x}", self.imm12)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " stagger_mask={:x}", self.stagger_mask)?;
        write!(f, " stagger_max={:x}", self.stagger_max)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12Rs1StaggerMaskStaggerMax {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FrepO => write!(f, "frep.o"),
            Self::FrepI => write!(f, "frep.i"),
        }
    }
}

/// The `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm12hiImm12loRs1Rs2 {
    pub op: OpcodeImm12hiImm12loRs1Rs2,
    pub raw: u32,
    pub imm12hi: u32,
    pub imm12lo: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatImm12hiImm12loRs1Rs2 {
    pub fn imm(&self) -> i32 {
        (((((self.imm12lo >> 0) & 0x1f) << 0 | ((self.imm12hi >> 0) & 0x7f) << 5) << 20) as i32)
            >> 20
    }
}

/// Opcodes with the `Imm12hiImm12loRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm12hiImm12loRs1Rs2 {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
    Fsq,
    Fsh,
    Fsb,
}

impl std::fmt::Display for FormatImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm12hi={:x}", self.imm12hi)?;
        write!(f, " imm12lo={:x}", self.imm12lo)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm12hiImm12loRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Sb => write!(f, "sb"),
            Self::Sh => write!(f, "sh"),
            Self::Sw => write!(f, "sw"),
            Self::Sd => write!(f, "sd"),
            Self::Fsw => write!(f, "fsw"),
            Self::Fsd => write!(f, "fsd"),
            Self::Fsq => write!(f, "fsq"),
            Self::Fsh => write!(f, "fsh"),
            Self::Fsb => write!(f, "fsb"),
        }
    }
}

/// The `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm20Rd {
    pub op: OpcodeImm20Rd,
    pub raw: u32,
    pub imm20: u32,
    pub rd: u32,
}

impl FormatImm20Rd {}

/// Opcodes with the `Imm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm20Rd {
    Lui,
    Auipc,
}

impl std::fmt::Display for FormatImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm20={:x}", self.imm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Lui => write!(f, "lui"),
            Self::Auipc => write!(f, "auipc"),
        }
    }
}

/// The `Imm5Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm5Rd {
    pub op: OpcodeImm5Rd,
    pub raw: u32,
    pub imm5: u32,
    pub rd: u32,
}

impl FormatImm5Rd {}

/// Opcodes with the `Imm5Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm5Rd {
    Dmstati,
}

impl std::fmt::Display for FormatImm5Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm5Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmstati => write!(f, "dmstati"),
        }
    }
}

/// The `Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm5RdRs1 {
    pub op: OpcodeImm5RdRs1,
    pub raw: u32,
    pub imm5: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm5RdRs1 {}

/// Opcodes with the `Imm5RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm5RdRs1 {
    PClip,
    PClipu,
    Dmcpyi,
}

impl std::fmt::Display for FormatImm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm5={:x}", self.imm5)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm5RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PClip => write!(f, "p.clip"),
            Self::PClipu => write!(f, "p.clipu"),
            Self::Dmcpyi => write!(f, "dmcpyi"),
        }
    }
}

/// The `Imm6RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatImm6RdRs1 {
    pub op: OpcodeImm6RdRs1,
    pub raw: u32,
    pub imm6: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatImm6RdRs1 {
    pub fn imm(&self) -> i32 {
        (((((self.imm6 >> 0) & 0x1f) << 1 | ((self.imm6 >> 5) & 0x1) << 0) << 26) as i32) >> 26
    }
}

/// Opcodes with the `Imm6RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeImm6RdRs1 {
    PvAddSciH,
    PvAddSciB,
    PvSubSciH,
    PvSubSciB,
    PvAvgSciH,
    PvAvgSciB,
    PvAvguSciH,
    PvAvguSciB,
    PvMinSciH,
    PvMinSciB,
    PvMinuSciH,
    PvMinuSciB,
    PvMaxSciH,
    PvMaxSciB,
    PvMaxuSciH,
    PvMaxuSciB,
    PvSrlSciH,
    PvSrlSciB,
    PvSraSciH,
    PvSraSciB,
    PvSllSciH,
    PvSllSciB,
    PvOrSciH,
    PvOrSciB,
    PvXorSciH,
    PvXorSciB,
    PvAndSciH,
    PvAndSciB,
    PvExtractH,
    PvExtractB,
    PvExtractuH,
    PvExtractuB,
    PvInsertH,
    PvInsertB,
    PvDotspSciH,
    PvDotspSciB,
    PvDotupSciH,
    PvDotupSciB,
    PvDotuspSciH,
    PvDotuspSciB,
    PvSdotspSciH,
    PvSdotspSciB,
    PvSdotupSciH,
    PvSdotupSciB,
    PvSdotuspSciH,
    PvSdotuspSciB,
    PvCmpeqSciH,
    PvCmpeqSciB,
    PvCmpneSciH,
    PvCmpneSciB,
    PvCmpgtSciH,
    PvCmpgtSciB,
    PvCmpgeSciH,
    PvCmpgeSciB,
    PvCmpltSciH,
    PvCmpltSciB,
    PvCmpleSciH,
    PvCmpleSciB,
    PvCmpgtuSciH,
    PvCmpgtuSciB,
    PvCmpgeuSciH,
    PvCmpgeuSciB,
    PvCmpltuSciH,
    PvCmpltuSciB,
    PvCmpleuSciH,
    PvCmpleuSciB,
    PvShuffleSciH,
    PvShufflei0SciB,
    PvShufflei1SciB,
    PvShufflei2SciB,
    PvShufflei3SciB,
}

impl std::fmt::Display for FormatImm6RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " imm6={:x}", self.imm6)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeImm6RdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PvAddSciH => write!(f, "pv.add.sci.h"),
            Self::PvAddSciB => write!(f, "pv.add.sci.b"),
            Self::PvSubSciH => write!(f, "pv.sub.sci.h"),
            Self::PvSubSciB => write!(f, "pv.sub.sci.b"),
            Self::PvAvgSciH => write!(f, "pv.avg.sci.h"),
            Self::PvAvgSciB => write!(f, "pv.avg.sci.b"),
            Self::PvAvguSciH => write!(f, "pv.avgu.sci.h"),
            Self::PvAvguSciB => write!(f, "pv.avgu.sci.b"),
            Self::PvMinSciH => write!(f, "pv.min.sci.h"),
            Self::PvMinSciB => write!(f, "pv.min.sci.b"),
            Self::PvMinuSciH => write!(f, "pv.minu.sci.h"),
            Self::PvMinuSciB => write!(f, "pv.minu.sci.b"),
            Self::PvMaxSciH => write!(f, "pv.max.sci.h"),
            Self::PvMaxSciB => write!(f, "pv.max.sci.b"),
            Self::PvMaxuSciH => write!(f, "pv.maxu.sci.h"),
            Self::PvMaxuSciB => write!(f, "pv.maxu.sci.b"),
            Self::PvSrlSciH => write!(f, "pv.srl.sci.h"),
            Self::PvSrlSciB => write!(f, "pv.srl.sci.b"),
            Self::PvSraSciH => write!(f, "pv.sra.sci.h"),
            Self::PvSraSciB => write!(f, "pv.sra.sci.b"),
            Self::PvSllSciH => write!(f, "pv.sll.sci.h"),
            Self::PvSllSciB => write!(f, "pv.sll.sci.b"),
            Self::PvOrSciH => write!(f, "pv.or.sci.h"),
            Self::PvOrSciB => write!(f, "pv.or.sci.b"),
            Self::PvXorSciH => write!(f, "pv.xor.sci.h"),
            Self::PvXorSciB => write!(f, "pv.xor.sci.b"),
            Self::PvAndSciH => write!(f, "pv.and.sci.h"),
            Self::PvAndSciB => write!(f, "pv.and.sci.b"),
            Self::PvExtractH => write!(f, "pv.extract.h"),
            Self::PvExtractB => write!(f, "pv.extract.b"),
            Self::PvExtractuH => write!(f, "pv.extractu.h"),
            Self::PvExtractuB => write!(f, "pv.extractu.b"),
            Self::PvInsertH => write!(f, "pv.insert.h"),
            Self::PvInsertB => write!(f, "pv.insert.b"),
            Self::PvDotspSciH => write!(f, "pv.dotsp.sci.h"),
            Self::PvDotspSciB => write!(f, "pv.dotsp.sci.b"),
            Self::PvDotupSciH => write!(f, "pv.dotup.sci.h"),
            Self::PvDotupSciB => write!(f, "pv.dotup.sci.b"),
            Self::PvDotuspSciH => write!(f, "pv.dotusp.sci.h"),
            Self::PvDotuspSciB => write!(f, "pv.dotusp.sci.b"),
            Self::PvSdotspSciH => write!(f, "pv.sdotsp.sci.h"),
            Self::PvSdotspSciB => write!(f, "pv.sdotsp.sci.b"),
            Self::PvSdotupSciH => write!(f, "pv.sdotup.sci.h"),
            Self::PvSdotupSciB => write!(f, "pv.sdotup.sci.b"),
            Self::PvSdotuspSciH => write!(f, "pv.sdotusp.sci.h"),
            Self::PvSdotuspSciB => write!(f, "pv.sdotusp.sci.b"),
            Self::PvCmpeqSciH => write!(f, "pv.cmpeq.sci.h"),
            Self::PvCmpeqSciB => write!(f, "pv.cmpeq.sci.b"),
            Self::PvCmpneSciH => write!(f, "pv.cmpne.sci.h"),
            Self::PvCmpneSciB => write!(f, "pv.cmpne.sci.b"),
            Self::PvCmpgtSciH => write!(f, "pv.cmpgt.sci.h"),
            Self::PvCmpgtSciB => write!(f, "pv.cmpgt.sci.b"),
            Self::PvCmpgeSciH => write!(f, "pv.cmpge.sci.h"),
            Self::PvCmpgeSciB => write!(f, "pv.cmpge.sci.b"),
            Self::PvCmpltSciH => write!(f, "pv.cmplt.sci.h"),
            Self::PvCmpltSciB => write!(f, "pv.cmplt.sci.b"),
            Self::PvCmpleSciH => write!(f, "pv.cmple.sci.h"),
            Self::PvCmpleSciB => write!(f, "pv.cmple.sci.b"),
            Self::PvCmpgtuSciH => write!(f, "pv.cmpgtu.sci.h"),
            Self::PvCmpgtuSciB => write!(f, "pv.cmpgtu.sci.b"),
            Self::PvCmpgeuSciH => write!(f, "pv.cmpgeu.sci.h"),
            Self::PvCmpgeuSciB => write!(f, "pv.cmpgeu.sci.b"),
            Self::PvCmpltuSciH => write!(f, "pv.cmpltu.sci.h"),
            Self::PvCmpltuSciB => write!(f, "pv.cmpltu.sci.b"),
            Self::PvCmpleuSciH => write!(f, "pv.cmpleu.sci.h"),
            Self::PvCmpleuSciB => write!(f, "pv.cmpleu.sci.b"),
            Self::PvShuffleSciH => write!(f, "pv.shuffle.sci.h"),
            Self::PvShufflei0SciB => write!(f, "pv.shufflei0.sci.b"),
            Self::PvShufflei1SciB => write!(f, "pv.shufflei1.sci.b"),
            Self::PvShufflei2SciB => write!(f, "pv.shufflei2.sci.b"),
            Self::PvShufflei3SciB => write!(f, "pv.shufflei3.sci.b"),
        }
    }
}

/// The `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatJimm20Rd {
    pub op: OpcodeJimm20Rd,
    pub raw: u32,
    pub jimm20: u32,
    pub rd: u32,
}

impl FormatJimm20Rd {
    pub fn jimm(&self) -> i32 {
        (((((self.jimm20 >> 0) & 0xff) << 12
            | ((self.jimm20 >> 8) & 0x1) << 11
            | ((self.jimm20 >> 9) & 0x3ff) << 1
            | ((self.jimm20 >> 19) & 0x1) << 20)
            << 11) as i32)
            >> 11
    }
}

/// Opcodes with the `Jimm20Rd` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeJimm20Rd {
    Jal,
}

impl std::fmt::Display for FormatJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " jimm20={:x}", self.jimm20)?;
        write!(f, " rd={:x}", self.rd)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeJimm20Rd {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Jal => write!(f, "jal"),
        }
    }
}

/// The `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1 {
    pub op: OpcodeRdRmRs1,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
}

impl FormatRdRmRs1 {}

/// Opcodes with the `RdRmRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1 {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FcvtSW,
    FcvtSWu,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLu,
    FcvtSD,
    FcvtDS,
    FsqrtD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWu,
    FcvtLD,
    FcvtLuD,
    FcvtDL,
    FcvtDLu,
    FcvtSQ,
    FcvtQS,
    FcvtDQ,
    FcvtQD,
    FsqrtQ,
    FcvtWQ,
    FcvtWuQ,
    FcvtQW,
    FcvtQWu,
    FcvtLQ,
    FcvtLuQ,
    FcvtQL,
    FcvtQLu,
    FsqrtH,
    FcvtWH,
    FcvtWuH,
    FcvtHW,
    FcvtHWu,
    FcvtLH,
    FcvtLuH,
    FcvtHL,
    FcvtHLu,
    FcvtHS,
    FcvtHD,
    FcvtHH,
    FcvtBH,
}

impl std::fmt::Display for FormatRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FsqrtS => write!(f, "fsqrt.s"),
            Self::FcvtWS => write!(f, "fcvt.w.s"),
            Self::FcvtWuS => write!(f, "fcvt.wu.s"),
            Self::FcvtSW => write!(f, "fcvt.s.w"),
            Self::FcvtSWu => write!(f, "fcvt.s.wu"),
            Self::FcvtLS => write!(f, "fcvt.l.s"),
            Self::FcvtLuS => write!(f, "fcvt.lu.s"),
            Self::FcvtSL => write!(f, "fcvt.s.l"),
            Self::FcvtSLu => write!(f, "fcvt.s.lu"),
            Self::FcvtSD => write!(f, "fcvt.s.d"),
            Self::FcvtDS => write!(f, "fcvt.d.s"),
            Self::FsqrtD => write!(f, "fsqrt.d"),
            Self::FcvtWD => write!(f, "fcvt.w.d"),
            Self::FcvtWuD => write!(f, "fcvt.wu.d"),
            Self::FcvtDW => write!(f, "fcvt.d.w"),
            Self::FcvtDWu => write!(f, "fcvt.d.wu"),
            Self::FcvtLD => write!(f, "fcvt.l.d"),
            Self::FcvtLuD => write!(f, "fcvt.lu.d"),
            Self::FcvtDL => write!(f, "fcvt.d.l"),
            Self::FcvtDLu => write!(f, "fcvt.d.lu"),
            Self::FcvtSQ => write!(f, "fcvt.s.q"),
            Self::FcvtQS => write!(f, "fcvt.q.s"),
            Self::FcvtDQ => write!(f, "fcvt.d.q"),
            Self::FcvtQD => write!(f, "fcvt.q.d"),
            Self::FsqrtQ => write!(f, "fsqrt.q"),
            Self::FcvtWQ => write!(f, "fcvt.w.q"),
            Self::FcvtWuQ => write!(f, "fcvt.wu.q"),
            Self::FcvtQW => write!(f, "fcvt.q.w"),
            Self::FcvtQWu => write!(f, "fcvt.q.wu"),
            Self::FcvtLQ => write!(f, "fcvt.l.q"),
            Self::FcvtLuQ => write!(f, "fcvt.lu.q"),
            Self::FcvtQL => write!(f, "fcvt.q.l"),
            Self::FcvtQLu => write!(f, "fcvt.q.lu"),
            Self::FsqrtH => write!(f, "fsqrt.h"),
            Self::FcvtWH => write!(f, "fcvt.w.h"),
            Self::FcvtWuH => write!(f, "fcvt.wu.h"),
            Self::FcvtHW => write!(f, "fcvt.h.w"),
            Self::FcvtHWu => write!(f, "fcvt.h.wu"),
            Self::FcvtLH => write!(f, "fcvt.l.h"),
            Self::FcvtLuH => write!(f, "fcvt.lu.h"),
            Self::FcvtHL => write!(f, "fcvt.h.l"),
            Self::FcvtHLu => write!(f, "fcvt.h.lu"),
            Self::FcvtHS => write!(f, "fcvt.h.s"),
            Self::FcvtHD => write!(f, "fcvt.h.d"),
            Self::FcvtHH => write!(f, "fcvt.h.h"),
            Self::FcvtBH => write!(f, "fcvt.b.h"),
        }
    }
}

/// The `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2 {
    pub op: OpcodeRdRmRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRmRs1Rs2 {}

/// Opcodes with the `RdRmRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2 {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FaddQ,
    FsubQ,
    FmulQ,
    FdivQ,
    FaddH,
    FsubH,
    FmulH,
    FdivH,
    FmulexSH,
    FmacexSH,
    FmulexSB,
    FmacexSB,
}

impl std::fmt::Display for FormatRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FaddS => write!(f, "fadd.s"),
            Self::FsubS => write!(f, "fsub.s"),
            Self::FmulS => write!(f, "fmul.s"),
            Self::FdivS => write!(f, "fdiv.s"),
            Self::FaddD => write!(f, "fadd.d"),
            Self::FsubD => write!(f, "fsub.d"),
            Self::FmulD => write!(f, "fmul.d"),
            Self::FdivD => write!(f, "fdiv.d"),
            Self::FaddQ => write!(f, "fadd.q"),
            Self::FsubQ => write!(f, "fsub.q"),
            Self::FmulQ => write!(f, "fmul.q"),
            Self::FdivQ => write!(f, "fdiv.q"),
            Self::FaddH => write!(f, "fadd.h"),
            Self::FsubH => write!(f, "fsub.h"),
            Self::FmulH => write!(f, "fmul.h"),
            Self::FdivH => write!(f, "fdiv.h"),
            Self::FmulexSH => write!(f, "fmulex.s.h"),
            Self::FmacexSH => write!(f, "fmacex.s.h"),
            Self::FmulexSB => write!(f, "fmulex.s.b"),
            Self::FmacexSB => write!(f, "fmacex.s.b"),
        }
    }
}

/// The `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRmRs1Rs2Rs3 {
    pub op: OpcodeRdRmRs1Rs2Rs3,
    pub raw: u32,
    pub rd: u32,
    pub rm: u32,
    pub rs1: u32,
    pub rs2: u32,
    pub rs3: u32,
}

impl FormatRdRmRs1Rs2Rs3 {}

/// Opcodes with the `RdRmRs1Rs2Rs3` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRmRs1Rs2Rs3 {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
    FmaddQ,
    FmsubQ,
    FnmsubQ,
    FnmaddQ,
    FmaddH,
    FmsubH,
    FnmsubH,
    FnmaddH,
}

impl std::fmt::Display for FormatRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rm={:x}", self.rm)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        write!(f, " rs3={:x}", self.rs3)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRmRs1Rs2Rs3 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::FmaddS => write!(f, "fmadd.s"),
            Self::FmsubS => write!(f, "fmsub.s"),
            Self::FnmsubS => write!(f, "fnmsub.s"),
            Self::FnmaddS => write!(f, "fnmadd.s"),
            Self::FmaddD => write!(f, "fmadd.d"),
            Self::FmsubD => write!(f, "fmsub.d"),
            Self::FnmsubD => write!(f, "fnmsub.d"),
            Self::FnmaddD => write!(f, "fnmadd.d"),
            Self::FmaddQ => write!(f, "fmadd.q"),
            Self::FmsubQ => write!(f, "fmsub.q"),
            Self::FnmsubQ => write!(f, "fnmsub.q"),
            Self::FnmaddQ => write!(f, "fnmadd.q"),
            Self::FmaddH => write!(f, "fmadd.h"),
            Self::FmsubH => write!(f, "fmsub.h"),
            Self::FnmsubH => write!(f, "fnmsub.h"),
            Self::FnmaddH => write!(f, "fnmadd.h"),
        }
    }
}

/// The `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1 {
    pub op: OpcodeRdRs1,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
}

impl FormatRdRs1 {}

/// Opcodes with the `RdRs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1 {
    HlvB,
    HlvBu,
    HlvH,
    HlvHu,
    HlvxHu,
    HlvW,
    HlvxWu,
    HlvWu,
    HlvD,
    FmvXW,
    FclassS,
    FmvWX,
    FclassD,
    FmvXD,
    FmvDX,
    FclassQ,
    PAbs,
    PExths,
    PExthz,
    PExtbs,
    PExtbz,
    PClb,
    PFl1,
    PFf1,
    PRor,
    PvAbsH,
    PvAbsB,
    FmvXH,
    FclassH,
    FmvHX,
    FcvtSH,
    FcvtDH,
    FcvtHB,
    FcvtBB,
    VfsqrtS,
    VfclassS,
    VfmvXS,
    VfmvSX,
    VfcvtXS,
    VfcvtXuS,
    VfcvtSX,
    VfcvtSXu,
    VfcvtHH,
    VfcvtuHH,
    VfsqrtH,
    VfclassH,
    VfmvXH,
    VfmvHX,
    VfcvtXH,
    VfcvtXuH,
    VfcvtHX,
    VfcvtHXu,
    VfcvtSH,
    VfcvtuSH,
    VfcvtHS,
    VfcvtuHS,
    VfsqrtB,
    VfmvXB,
    VfmvBX,
    VfclassB,
    VfcvtXB,
    VfcvtXuB,
    VfcvtBX,
    VfcvtBXu,
    VfcvtSB,
    VfcvtuSB,
    VfcvtBS,
    VfcvtuBS,
    VfcvtHB,
    VfcvtuHB,
    VfcvtBH,
    VfcvtuBH,
    VfcvtBB,
    VfcvtuBB,
    VfsumS,
    VfnsumS,
    VfsumH,
    VfnsumH,
    VfsumB,
    VfnsumB,
    VfsumexSH,
    VfnsumexSH,
    VfsumexHB,
    VfnsumexHB,
}

impl std::fmt::Display for FormatRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::HlvB => write!(f, "hlv.b"),
            Self::HlvBu => write!(f, "hlv.bu"),
            Self::HlvH => write!(f, "hlv.h"),
            Self::HlvHu => write!(f, "hlv.hu"),
            Self::HlvxHu => write!(f, "hlvx.hu"),
            Self::HlvW => write!(f, "hlv.w"),
            Self::HlvxWu => write!(f, "hlvx.wu"),
            Self::HlvWu => write!(f, "hlv.wu"),
            Self::HlvD => write!(f, "hlv.d"),
            Self::FmvXW => write!(f, "fmv.x.w"),
            Self::FclassS => write!(f, "fclass.s"),
            Self::FmvWX => write!(f, "fmv.w.x"),
            Self::FclassD => write!(f, "fclass.d"),
            Self::FmvXD => write!(f, "fmv.x.d"),
            Self::FmvDX => write!(f, "fmv.d.x"),
            Self::FclassQ => write!(f, "fclass.q"),
            Self::PAbs => write!(f, "p.abs"),
            Self::PExths => write!(f, "p.exths"),
            Self::PExthz => write!(f, "p.exthz"),
            Self::PExtbs => write!(f, "p.extbs"),
            Self::PExtbz => write!(f, "p.extbz"),
            Self::PClb => write!(f, "p.clb"),
            Self::PFl1 => write!(f, "p.fl1"),
            Self::PFf1 => write!(f, "p.ff1"),
            Self::PRor => write!(f, "p.ror"),
            Self::PvAbsH => write!(f, "pv.abs.h"),
            Self::PvAbsB => write!(f, "pv.abs.b"),
            Self::FmvXH => write!(f, "fmv.x.h"),
            Self::FclassH => write!(f, "fclass.h"),
            Self::FmvHX => write!(f, "fmv.h.x"),
            Self::FcvtSH => write!(f, "fcvt.s.h"),
            Self::FcvtDH => write!(f, "fcvt.d.h"),
            Self::FcvtHB => write!(f, "fcvt.h.b"),
            Self::FcvtBB => write!(f, "fcvt.b.b"),
            Self::VfsqrtS => write!(f, "vfsqrt.s"),
            Self::VfclassS => write!(f, "vfclass.s"),
            Self::VfmvXS => write!(f, "vfmv.x.s"),
            Self::VfmvSX => write!(f, "vfmv.s.x"),
            Self::VfcvtXS => write!(f, "vfcvt.x.s"),
            Self::VfcvtXuS => write!(f, "vfcvt.xu.s"),
            Self::VfcvtSX => write!(f, "vfcvt.s.x"),
            Self::VfcvtSXu => write!(f, "vfcvt.s.xu"),
            Self::VfcvtHH => write!(f, "vfcvt.h.h"),
            Self::VfcvtuHH => write!(f, "vfcvtu.h.h"),
            Self::VfsqrtH => write!(f, "vfsqrt.h"),
            Self::VfclassH => write!(f, "vfclass.h"),
            Self::VfmvXH => write!(f, "vfmv.x.h"),
            Self::VfmvHX => write!(f, "vfmv.h.x"),
            Self::VfcvtXH => write!(f, "vfcvt.x.h"),
            Self::VfcvtXuH => write!(f, "vfcvt.xu.h"),
            Self::VfcvtHX => write!(f, "vfcvt.h.x"),
            Self::VfcvtHXu => write!(f, "vfcvt.h.xu"),
            Self::VfcvtSH => write!(f, "vfcvt.s.h"),
            Self::VfcvtuSH => write!(f, "vfcvtu.s.h"),
            Self::VfcvtHS => write!(f, "vfcvt.h.s"),
            Self::VfcvtuHS => write!(f, "vfcvtu.h.s"),
            Self::VfsqrtB => write!(f, "vfsqrt.b"),
            Self::VfmvXB => write!(f, "vfmv.x.b"),
            Self::VfmvBX => write!(f, "vfmv.b.x"),
            Self::VfclassB => write!(f, "vfclass.b"),
            Self::VfcvtXB => write!(f, "vfcvt.x.b"),
            Self::VfcvtXuB => write!(f, "vfcvt.xu.b"),
            Self::VfcvtBX => write!(f, "vfcvt.b.x"),
            Self::VfcvtBXu => write!(f, "vfcvt.b.xu"),
            Self::VfcvtSB => write!(f, "vfcvt.s.b"),
            Self::VfcvtuSB => write!(f, "vfcvtu.s.b"),
            Self::VfcvtBS => write!(f, "vfcvt.b.s"),
            Self::VfcvtuBS => write!(f, "vfcvtu.b.s"),
            Self::VfcvtHB => write!(f, "vfcvt.h.b"),
            Self::VfcvtuHB => write!(f, "vfcvtu.h.b"),
            Self::VfcvtBH => write!(f, "vfcvt.b.h"),
            Self::VfcvtuBH => write!(f, "vfcvtu.b.h"),
            Self::VfcvtBB => write!(f, "vfcvt.b.b"),
            Self::VfcvtuBB => write!(f, "vfcvtu.b.b"),
            Self::VfsumS => write!(f, "vfsum.s"),
            Self::VfnsumS => write!(f, "vfnsum.s"),
            Self::VfsumH => write!(f, "vfsum.h"),
            Self::VfnsumH => write!(f, "vfnsum.h"),
            Self::VfsumB => write!(f, "vfsum.b"),
            Self::VfnsumB => write!(f, "vfnsum.b"),
            Self::VfsumexSH => write!(f, "vfsumex.s.h"),
            Self::VfnsumexSH => write!(f, "vfnsumex.s.h"),
            Self::VfsumexHB => write!(f, "vfsumex.h.b"),
            Self::VfnsumexHB => write!(f, "vfnsumex.h.b"),
        }
    }
}

/// The `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Rs2 {
    pub op: OpcodeRdRs1Rs2,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRdRs1Rs2 {}

/// Opcodes with the `RdRs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Rs2 {
    Add,
    Sub,
    Sll,
    Slt,
    Sltu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    Divu,
    Rem,
    Remu,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FleS,
    FltS,
    FeqS,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FleD,
    FltD,
    FeqD,
    FsgnjQ,
    FsgnjnQ,
    FsgnjxQ,
    FminQ,
    FmaxQ,
    FleQ,
    FltQ,
    FeqQ,
    PExtractr,
    PExtractur,
    PInsertr,
    PBsetr,
    PBclrr,
    PCnt,
    PClipr,
    PClipur,
    PMac,
    PMsu,
    PMin,
    PMinu,
    PMax,
    PMaxu,
    PSlet,
    PSletu,
    PvAddH,
    PvAddScH,
    PvAddB,
    PvAddScB,
    PvSubH,
    PvSubScH,
    PvSubB,
    PvSubScB,
    PvAvgH,
    PvAvgScH,
    PvAvgB,
    PvAvgScB,
    PvAvguH,
    PvAvguScH,
    PvAvguB,
    PvAvguScB,
    PvMinH,
    PvMinScH,
    PvMinB,
    PvMinScB,
    PvMinuH,
    PvMinuScH,
    PvMinuB,
    PvMinuScB,
    PvMaxH,
    PvMaxScH,
    PvMaxB,
    PvMaxScB,
    PvMaxuH,
    PvMaxuScH,
    PvMaxuB,
    PvMaxuScB,
    PvSrlH,
    PvSrlScH,
    PvSrlB,
    PvSrlScB,
    PvSraH,
    PvSraScH,
    PvSraB,
    PvSraScB,
    PvSllH,
    PvSllScH,
    PvSllB,
    PvSllScB,
    PvOrH,
    PvOrScH,
    PvOrB,
    PvOrScB,
    PvXorH,
    PvXorScH,
    PvXorB,
    PvXorScB,
    PvAndH,
    PvAndScH,
    PvAndB,
    PvAndScB,
    PvDotspH,
    PvDotspScH,
    PvDotspB,
    PvDotspScB,
    PvDotupH,
    PvDotupScH,
    PvDotupB,
    PvDotupScB,
    PvDotuspH,
    PvDotuspScH,
    PvDotuspB,
    PvDotuspScB,
    PvSdotspH,
    PvSdotspScH,
    PvSdotspB,
    PvSdotspScB,
    PvSdotupH,
    PvSdotupScH,
    PvSdotupB,
    PvSdotupScB,
    PvSdotuspH,
    PvSdotuspScH,
    PvSdotuspB,
    PvSdotuspScB,
    PvCmpeqH,
    PvCmpeqScH,
    PvCmpeqB,
    PvCmpeqScB,
    PvCmpneH,
    PvCmpneScH,
    PvCmpneB,
    PvCmpneScB,
    PvCmpgtH,
    PvCmpgtScH,
    PvCmpgtB,
    PvCmpgtScB,
    PvCmpgeH,
    PvCmpgeScH,
    PvCmpgeB,
    PvCmpgeScB,
    PvCmpltH,
    PvCmpltScH,
    PvCmpltB,
    PvCmpltScB,
    PvCmpleH,
    PvCmpleScH,
    PvCmpleB,
    PvCmpleScB,
    PvCmpgtuH,
    PvCmpgtuScH,
    PvCmpgtuB,
    PvCmpgtuScB,
    PvCmpgeuH,
    PvCmpgeuScH,
    PvCmpgeuB,
    PvCmpgeuScB,
    PvCmpltuH,
    PvCmpltuScH,
    PvCmpltuB,
    PvCmpltuScB,
    PvCmpleuH,
    PvCmpleuScH,
    PvCmpleuB,
    PvCmpleuScB,
    PvAddHDiv2,
    PvAddHDiv4,
    PvAddHDiv8,
    PvSubHDiv2,
    PvSubHDiv4,
    PvSubHDiv8,
    PvShuffleH,
    PvShuffleB,
    PvShuffle2H,
    PvShuffle2B,
    PvPack,
    PvPackH,
    PvPackhiB,
    PvPackloB,
    Dmcpy,
    FsgnjH,
    FsgnjnH,
    FsgnjxH,
    FminH,
    FmaxH,
    FeqH,
    FltH,
    FleH,
    VfaddS,
    VfaddRS,
    VfsubS,
    VfsubRS,
    VfmulS,
    VfmulRS,
    VfdivS,
    VfdivRS,
    VfminS,
    VfminRS,
    VfmaxS,
    VfmaxRS,
    VfmacS,
    VfmacRS,
    VfmreS,
    VfmreRS,
    VfsgnjS,
    VfsgnjRS,
    VfsgnjnS,
    VfsgnjnRS,
    VfsgnjxS,
    VfsgnjxRS,
    VfeqS,
    VfeqRS,
    VfneS,
    VfneRS,
    VfltS,
    VfltRS,
    VfgeS,
    VfgeRS,
    VfleS,
    VfleRS,
    VfgtS,
    VfgtRS,
    VfcpkaSS,
    VfcpkbSS,
    VfcpkcSS,
    VfcpkdSS,
    VfcpkaSD,
    VfcpkbSD,
    VfcpkcSD,
    VfcpkdSD,
    VfaddH,
    VfaddRH,
    VfsubH,
    VfsubRH,
    VfmulH,
    VfmulRH,
    VfdivH,
    VfdivRH,
    VfminH,
    VfminRH,
    VfmaxH,
    VfmaxRH,
    VfmacH,
    VfmacRH,
    VfmreH,
    VfmreRH,
    VfsgnjH,
    VfsgnjRH,
    VfsgnjnH,
    VfsgnjnRH,
    VfsgnjxH,
    VfsgnjxRH,
    VfeqH,
    VfeqRH,
    VfneH,
    VfneRH,
    VfltH,
    VfltRH,
    VfgeH,
    VfgeRH,
    VfleH,
    VfleRH,
    VfgtH,
    VfgtRH,
    VfcpkaHS,
    VfcpkbHS,
    VfcpkcHS,
    VfcpkdHS,
    VfcpkaHD,
    VfcpkbHD,
    VfcpkcHD,
    VfcpkdHD,
    VfaddB,
    VfaddRB,
    VfsubB,
    VfsubRB,
    VfmulB,
    VfmulRB,
    VfdivB,
    VfdivRB,
    VfminB,
    VfminRB,
    VfmaxB,
    VfmaxRB,
    VfmacB,
    VfmacRB,
    VfmreB,
    VfmreRB,
    VfsgnjB,
    VfsgnjRB,
    VfsgnjnB,
    VfsgnjnRB,
    VfsgnjxB,
    VfsgnjxRB,
    VfeqB,
    VfeqRB,
    VfneB,
    VfneRB,
    VfltB,
    VfltRB,
    VfgeB,
    VfgeRB,
    VfleB,
    VfleRB,
    VfgtB,
    VfgtRB,
    VfcpkaBS,
    VfcpkbBS,
    VfcpkcBS,
    VfcpkdBS,
    VfcpkaBD,
    VfcpkbBD,
    VfcpkcBD,
    VfcpkdBD,
    VfdotpexSH,
    VfdotpexSRH,
    VfndotpexSH,
    VfndotpexSRH,
    VfdotpexHB,
    VfdotpexHRB,
    VfndotpexHB,
    VfndotpexHRB,
}

impl std::fmt::Display for FormatRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Add => write!(f, "add"),
            Self::Sub => write!(f, "sub"),
            Self::Sll => write!(f, "sll"),
            Self::Slt => write!(f, "slt"),
            Self::Sltu => write!(f, "sltu"),
            Self::Xor => write!(f, "xor"),
            Self::Srl => write!(f, "srl"),
            Self::Sra => write!(f, "sra"),
            Self::Or => write!(f, "or"),
            Self::And => write!(f, "and"),
            Self::Addw => write!(f, "addw"),
            Self::Subw => write!(f, "subw"),
            Self::Sllw => write!(f, "sllw"),
            Self::Srlw => write!(f, "srlw"),
            Self::Sraw => write!(f, "sraw"),
            Self::Mul => write!(f, "mul"),
            Self::Mulh => write!(f, "mulh"),
            Self::Mulhsu => write!(f, "mulhsu"),
            Self::Mulhu => write!(f, "mulhu"),
            Self::Div => write!(f, "div"),
            Self::Divu => write!(f, "divu"),
            Self::Rem => write!(f, "rem"),
            Self::Remu => write!(f, "remu"),
            Self::Mulw => write!(f, "mulw"),
            Self::Divw => write!(f, "divw"),
            Self::Divuw => write!(f, "divuw"),
            Self::Remw => write!(f, "remw"),
            Self::Remuw => write!(f, "remuw"),
            Self::FsgnjS => write!(f, "fsgnj.s"),
            Self::FsgnjnS => write!(f, "fsgnjn.s"),
            Self::FsgnjxS => write!(f, "fsgnjx.s"),
            Self::FminS => write!(f, "fmin.s"),
            Self::FmaxS => write!(f, "fmax.s"),
            Self::FleS => write!(f, "fle.s"),
            Self::FltS => write!(f, "flt.s"),
            Self::FeqS => write!(f, "feq.s"),
            Self::FsgnjD => write!(f, "fsgnj.d"),
            Self::FsgnjnD => write!(f, "fsgnjn.d"),
            Self::FsgnjxD => write!(f, "fsgnjx.d"),
            Self::FminD => write!(f, "fmin.d"),
            Self::FmaxD => write!(f, "fmax.d"),
            Self::FleD => write!(f, "fle.d"),
            Self::FltD => write!(f, "flt.d"),
            Self::FeqD => write!(f, "feq.d"),
            Self::FsgnjQ => write!(f, "fsgnj.q"),
            Self::FsgnjnQ => write!(f, "fsgnjn.q"),
            Self::FsgnjxQ => write!(f, "fsgnjx.q"),
            Self::FminQ => write!(f, "fmin.q"),
            Self::FmaxQ => write!(f, "fmax.q"),
            Self::FleQ => write!(f, "fle.q"),
            Self::FltQ => write!(f, "flt.q"),
            Self::FeqQ => write!(f, "feq.q"),
            Self::PExtractr => write!(f, "p.extractr"),
            Self::PExtractur => write!(f, "p.extractur"),
            Self::PInsertr => write!(f, "p.insertr"),
            Self::PBsetr => write!(f, "p.bsetr"),
            Self::PBclrr => write!(f, "p.bclrr"),
            Self::PCnt => write!(f, "p.cnt"),
            Self::PClipr => write!(f, "p.clipr"),
            Self::PClipur => write!(f, "p.clipur"),
            Self::PMac => write!(f, "p.mac"),
            Self::PMsu => write!(f, "p.msu"),
            Self::PMin => write!(f, "p.min"),
            Self::PMinu => write!(f, "p.minu"),
            Self::PMax => write!(f, "p.max"),
            Self::PMaxu => write!(f, "p.maxu"),
            Self::PSlet => write!(f, "p.slet"),
            Self::PSletu => write!(f, "p.sletu"),
            Self::PvAddH => write!(f, "pv.add.h"),
            Self::PvAddScH => write!(f, "pv.add.sc.h"),
            Self::PvAddB => write!(f, "pv.add.b"),
            Self::PvAddScB => write!(f, "pv.add.sc.b"),
            Self::PvSubH => write!(f, "pv.sub.h"),
            Self::PvSubScH => write!(f, "pv.sub.sc.h"),
            Self::PvSubB => write!(f, "pv.sub.b"),
            Self::PvSubScB => write!(f, "pv.sub.sc.b"),
            Self::PvAvgH => write!(f, "pv.avg.h"),
            Self::PvAvgScH => write!(f, "pv.avg.sc.h"),
            Self::PvAvgB => write!(f, "pv.avg.b"),
            Self::PvAvgScB => write!(f, "pv.avg.sc.b"),
            Self::PvAvguH => write!(f, "pv.avgu.h"),
            Self::PvAvguScH => write!(f, "pv.avgu.sc.h"),
            Self::PvAvguB => write!(f, "pv.avgu.b"),
            Self::PvAvguScB => write!(f, "pv.avgu.sc.b"),
            Self::PvMinH => write!(f, "pv.min.h"),
            Self::PvMinScH => write!(f, "pv.min.sc.h"),
            Self::PvMinB => write!(f, "pv.min.b"),
            Self::PvMinScB => write!(f, "pv.min.sc.b"),
            Self::PvMinuH => write!(f, "pv.minu.h"),
            Self::PvMinuScH => write!(f, "pv.minu.sc.h"),
            Self::PvMinuB => write!(f, "pv.minu.b"),
            Self::PvMinuScB => write!(f, "pv.minu.sc.b"),
            Self::PvMaxH => write!(f, "pv.max.h"),
            Self::PvMaxScH => write!(f, "pv.max.sc.h"),
            Self::PvMaxB => write!(f, "pv.max.b"),
            Self::PvMaxScB => write!(f, "pv.max.sc.b"),
            Self::PvMaxuH => write!(f, "pv.maxu.h"),
            Self::PvMaxuScH => write!(f, "pv.maxu.sc.h"),
            Self::PvMaxuB => write!(f, "pv.maxu.b"),
            Self::PvMaxuScB => write!(f, "pv.maxu.sc.b"),
            Self::PvSrlH => write!(f, "pv.srl.h"),
            Self::PvSrlScH => write!(f, "pv.srl.sc.h"),
            Self::PvSrlB => write!(f, "pv.srl.b"),
            Self::PvSrlScB => write!(f, "pv.srl.sc.b"),
            Self::PvSraH => write!(f, "pv.sra.h"),
            Self::PvSraScH => write!(f, "pv.sra.sc.h"),
            Self::PvSraB => write!(f, "pv.sra.b"),
            Self::PvSraScB => write!(f, "pv.sra.sc.b"),
            Self::PvSllH => write!(f, "pv.sll.h"),
            Self::PvSllScH => write!(f, "pv.sll.sc.h"),
            Self::PvSllB => write!(f, "pv.sll.b"),
            Self::PvSllScB => write!(f, "pv.sll.sc.b"),
            Self::PvOrH => write!(f, "pv.or.h"),
            Self::PvOrScH => write!(f, "pv.or.sc.h"),
            Self::PvOrB => write!(f, "pv.or.b"),
            Self::PvOrScB => write!(f, "pv.or.sc.b"),
            Self::PvXorH => write!(f, "pv.xor.h"),
            Self::PvXorScH => write!(f, "pv.xor.sc.h"),
            Self::PvXorB => write!(f, "pv.xor.b"),
            Self::PvXorScB => write!(f, "pv.xor.sc.b"),
            Self::PvAndH => write!(f, "pv.and.h"),
            Self::PvAndScH => write!(f, "pv.and.sc.h"),
            Self::PvAndB => write!(f, "pv.and.b"),
            Self::PvAndScB => write!(f, "pv.and.sc.b"),
            Self::PvDotspH => write!(f, "pv.dotsp.h"),
            Self::PvDotspScH => write!(f, "pv.dotsp.sc.h"),
            Self::PvDotspB => write!(f, "pv.dotsp.b"),
            Self::PvDotspScB => write!(f, "pv.dotsp.sc.b"),
            Self::PvDotupH => write!(f, "pv.dotup.h"),
            Self::PvDotupScH => write!(f, "pv.dotup.sc.h"),
            Self::PvDotupB => write!(f, "pv.dotup.b"),
            Self::PvDotupScB => write!(f, "pv.dotup.sc.b"),
            Self::PvDotuspH => write!(f, "pv.dotusp.h"),
            Self::PvDotuspScH => write!(f, "pv.dotusp.sc.h"),
            Self::PvDotuspB => write!(f, "pv.dotusp.b"),
            Self::PvDotuspScB => write!(f, "pv.dotusp.sc.b"),
            Self::PvSdotspH => write!(f, "pv.sdotsp.h"),
            Self::PvSdotspScH => write!(f, "pv.sdotsp.sc.h"),
            Self::PvSdotspB => write!(f, "pv.sdotsp.b"),
            Self::PvSdotspScB => write!(f, "pv.sdotsp.sc.b"),
            Self::PvSdotupH => write!(f, "pv.sdotup.h"),
            Self::PvSdotupScH => write!(f, "pv.sdotup.sc.h"),
            Self::PvSdotupB => write!(f, "pv.sdotup.b"),
            Self::PvSdotupScB => write!(f, "pv.sdotup.sc.b"),
            Self::PvSdotuspH => write!(f, "pv.sdotusp.h"),
            Self::PvSdotuspScH => write!(f, "pv.sdotusp.sc.h"),
            Self::PvSdotuspB => write!(f, "pv.sdotusp.b"),
            Self::PvSdotuspScB => write!(f, "pv.sdotusp.sc.b"),
            Self::PvCmpeqH => write!(f, "pv.cmpeq.h"),
            Self::PvCmpeqScH => write!(f, "pv.cmpeq.sc.h"),
            Self::PvCmpeqB => write!(f, "pv.cmpeq.b"),
            Self::PvCmpeqScB => write!(f, "pv.cmpeq.sc.b"),
            Self::PvCmpneH => write!(f, "pv.cmpne.h"),
            Self::PvCmpneScH => write!(f, "pv.cmpne.sc.h"),
            Self::PvCmpneB => write!(f, "pv.cmpne.b"),
            Self::PvCmpneScB => write!(f, "pv.cmpne.sc.b"),
            Self::PvCmpgtH => write!(f, "pv.cmpgt.h"),
            Self::PvCmpgtScH => write!(f, "pv.cmpgt.sc.h"),
            Self::PvCmpgtB => write!(f, "pv.cmpgt.b"),
            Self::PvCmpgtScB => write!(f, "pv.cmpgt.sc.b"),
            Self::PvCmpgeH => write!(f, "pv.cmpge.h"),
            Self::PvCmpgeScH => write!(f, "pv.cmpge.sc.h"),
            Self::PvCmpgeB => write!(f, "pv.cmpge.b"),
            Self::PvCmpgeScB => write!(f, "pv.cmpge.sc.b"),
            Self::PvCmpltH => write!(f, "pv.cmplt.h"),
            Self::PvCmpltScH => write!(f, "pv.cmplt.sc.h"),
            Self::PvCmpltB => write!(f, "pv.cmplt.b"),
            Self::PvCmpltScB => write!(f, "pv.cmplt.sc.b"),
            Self::PvCmpleH => write!(f, "pv.cmple.h"),
            Self::PvCmpleScH => write!(f, "pv.cmple.sc.h"),
            Self::PvCmpleB => write!(f, "pv.cmple.b"),
            Self::PvCmpleScB => write!(f, "pv.cmple.sc.b"),
            Self::PvCmpgtuH => write!(f, "pv.cmpgtu.h"),
            Self::PvCmpgtuScH => write!(f, "pv.cmpgtu.sc.h"),
            Self::PvCmpgtuB => write!(f, "pv.cmpgtu.b"),
            Self::PvCmpgtuScB => write!(f, "pv.cmpgtu.sc.b"),
            Self::PvCmpgeuH => write!(f, "pv.cmpgeu.h"),
            Self::PvCmpgeuScH => write!(f, "pv.cmpgeu.sc.h"),
            Self::PvCmpgeuB => write!(f, "pv.cmpgeu.b"),
            Self::PvCmpgeuScB => write!(f, "pv.cmpgeu.sc.b"),
            Self::PvCmpltuH => write!(f, "pv.cmpltu.h"),
            Self::PvCmpltuScH => write!(f, "pv.cmpltu.sc.h"),
            Self::PvCmpltuB => write!(f, "pv.cmpltu.b"),
            Self::PvCmpltuScB => write!(f, "pv.cmpltu.sc.b"),
            Self::PvCmpleuH => write!(f, "pv.cmpleu.h"),
            Self::PvCmpleuScH => write!(f, "pv.cmpleu.sc.h"),
            Self::PvCmpleuB => write!(f, "pv.cmpleu.b"),
            Self::PvCmpleuScB => write!(f, "pv.cmpleu.sc.b"),
            Self::PvAddHDiv2 => write!(f, "pv.add.h.div2"),
            Self::PvAddHDiv4 => write!(f, "pv.add.h.div4"),
            Self::PvAddHDiv8 => write!(f, "pv.add.h.div8"),
            Self::PvSubHDiv2 => write!(f, "pv.sub.h.div2"),
            Self::PvSubHDiv4 => write!(f, "pv.sub.h.div4"),
            Self::PvSubHDiv8 => write!(f, "pv.sub.h.div8"),
            Self::PvShuffleH => write!(f, "pv.shuffle.h"),
            Self::PvShuffleB => write!(f, "pv.shuffle.b"),
            Self::PvShuffle2H => write!(f, "pv.shuffle2.h"),
            Self::PvShuffle2B => write!(f, "pv.shuffle2.b"),
            Self::PvPack => write!(f, "pv.pack"),
            Self::PvPackH => write!(f, "pv.pack.h"),
            Self::PvPackhiB => write!(f, "pv.packhi.b"),
            Self::PvPackloB => write!(f, "pv.packlo.b"),
            Self::Dmcpy => write!(f, "dmcpy"),
            Self::FsgnjH => write!(f, "fsgnj.h"),
            Self::FsgnjnH => write!(f, "fsgnjn.h"),
            Self::FsgnjxH => write!(f, "fsgnjx.h"),
            Self::FminH => write!(f, "fmin.h"),
            Self::FmaxH => write!(f, "fmax.h"),
            Self::FeqH => write!(f, "feq.h"),
            Self::FltH => write!(f, "flt.h"),
            Self::FleH => write!(f, "fle.h"),
            Self::VfaddS => write!(f, "vfadd.s"),
            Self::VfaddRS => write!(f, "vfadd.r.s"),
            Self::VfsubS => write!(f, "vfsub.s"),
            Self::VfsubRS => write!(f, "vfsub.r.s"),
            Self::VfmulS => write!(f, "vfmul.s"),
            Self::VfmulRS => write!(f, "vfmul.r.s"),
            Self::VfdivS => write!(f, "vfdiv.s"),
            Self::VfdivRS => write!(f, "vfdiv.r.s"),
            Self::VfminS => write!(f, "vfmin.s"),
            Self::VfminRS => write!(f, "vfmin.r.s"),
            Self::VfmaxS => write!(f, "vfmax.s"),
            Self::VfmaxRS => write!(f, "vfmax.r.s"),
            Self::VfmacS => write!(f, "vfmac.s"),
            Self::VfmacRS => write!(f, "vfmac.r.s"),
            Self::VfmreS => write!(f, "vfmre.s"),
            Self::VfmreRS => write!(f, "vfmre.r.s"),
            Self::VfsgnjS => write!(f, "vfsgnj.s"),
            Self::VfsgnjRS => write!(f, "vfsgnj.r.s"),
            Self::VfsgnjnS => write!(f, "vfsgnjn.s"),
            Self::VfsgnjnRS => write!(f, "vfsgnjn.r.s"),
            Self::VfsgnjxS => write!(f, "vfsgnjx.s"),
            Self::VfsgnjxRS => write!(f, "vfsgnjx.r.s"),
            Self::VfeqS => write!(f, "vfeq.s"),
            Self::VfeqRS => write!(f, "vfeq.r.s"),
            Self::VfneS => write!(f, "vfne.s"),
            Self::VfneRS => write!(f, "vfne.r.s"),
            Self::VfltS => write!(f, "vflt.s"),
            Self::VfltRS => write!(f, "vflt.r.s"),
            Self::VfgeS => write!(f, "vfge.s"),
            Self::VfgeRS => write!(f, "vfge.r.s"),
            Self::VfleS => write!(f, "vfle.s"),
            Self::VfleRS => write!(f, "vfle.r.s"),
            Self::VfgtS => write!(f, "vfgt.s"),
            Self::VfgtRS => write!(f, "vfgt.r.s"),
            Self::VfcpkaSS => write!(f, "vfcpka.s.s"),
            Self::VfcpkbSS => write!(f, "vfcpkb.s.s"),
            Self::VfcpkcSS => write!(f, "vfcpkc.s.s"),
            Self::VfcpkdSS => write!(f, "vfcpkd.s.s"),
            Self::VfcpkaSD => write!(f, "vfcpka.s.d"),
            Self::VfcpkbSD => write!(f, "vfcpkb.s.d"),
            Self::VfcpkcSD => write!(f, "vfcpkc.s.d"),
            Self::VfcpkdSD => write!(f, "vfcpkd.s.d"),
            Self::VfaddH => write!(f, "vfadd.h"),
            Self::VfaddRH => write!(f, "vfadd.r.h"),
            Self::VfsubH => write!(f, "vfsub.h"),
            Self::VfsubRH => write!(f, "vfsub.r.h"),
            Self::VfmulH => write!(f, "vfmul.h"),
            Self::VfmulRH => write!(f, "vfmul.r.h"),
            Self::VfdivH => write!(f, "vfdiv.h"),
            Self::VfdivRH => write!(f, "vfdiv.r.h"),
            Self::VfminH => write!(f, "vfmin.h"),
            Self::VfminRH => write!(f, "vfmin.r.h"),
            Self::VfmaxH => write!(f, "vfmax.h"),
            Self::VfmaxRH => write!(f, "vfmax.r.h"),
            Self::VfmacH => write!(f, "vfmac.h"),
            Self::VfmacRH => write!(f, "vfmac.r.h"),
            Self::VfmreH => write!(f, "vfmre.h"),
            Self::VfmreRH => write!(f, "vfmre.r.h"),
            Self::VfsgnjH => write!(f, "vfsgnj.h"),
            Self::VfsgnjRH => write!(f, "vfsgnj.r.h"),
            Self::VfsgnjnH => write!(f, "vfsgnjn.h"),
            Self::VfsgnjnRH => write!(f, "vfsgnjn.r.h"),
            Self::VfsgnjxH => write!(f, "vfsgnjx.h"),
            Self::VfsgnjxRH => write!(f, "vfsgnjx.r.h"),
            Self::VfeqH => write!(f, "vfeq.h"),
            Self::VfeqRH => write!(f, "vfeq.r.h"),
            Self::VfneH => write!(f, "vfne.h"),
            Self::VfneRH => write!(f, "vfne.r.h"),
            Self::VfltH => write!(f, "vflt.h"),
            Self::VfltRH => write!(f, "vflt.r.h"),
            Self::VfgeH => write!(f, "vfge.h"),
            Self::VfgeRH => write!(f, "vfge.r.h"),
            Self::VfleH => write!(f, "vfle.h"),
            Self::VfleRH => write!(f, "vfle.r.h"),
            Self::VfgtH => write!(f, "vfgt.h"),
            Self::VfgtRH => write!(f, "vfgt.r.h"),
            Self::VfcpkaHS => write!(f, "vfcpka.h.s"),
            Self::VfcpkbHS => write!(f, "vfcpkb.h.s"),
            Self::VfcpkcHS => write!(f, "vfcpkc.h.s"),
            Self::VfcpkdHS => write!(f, "vfcpkd.h.s"),
            Self::VfcpkaHD => write!(f, "vfcpka.h.d"),
            Self::VfcpkbHD => write!(f, "vfcpkb.h.d"),
            Self::VfcpkcHD => write!(f, "vfcpkc.h.d"),
            Self::VfcpkdHD => write!(f, "vfcpkd.h.d"),
            Self::VfaddB => write!(f, "vfadd.b"),
            Self::VfaddRB => write!(f, "vfadd.r.b"),
            Self::VfsubB => write!(f, "vfsub.b"),
            Self::VfsubRB => write!(f, "vfsub.r.b"),
            Self::VfmulB => write!(f, "vfmul.b"),
            Self::VfmulRB => write!(f, "vfmul.r.b"),
            Self::VfdivB => write!(f, "vfdiv.b"),
            Self::VfdivRB => write!(f, "vfdiv.r.b"),
            Self::VfminB => write!(f, "vfmin.b"),
            Self::VfminRB => write!(f, "vfmin.r.b"),
            Self::VfmaxB => write!(f, "vfmax.b"),
            Self::VfmaxRB => write!(f, "vfmax.r.b"),
            Self::VfmacB => write!(f, "vfmac.b"),
            Self::VfmacRB => write!(f, "vfmac.r.b"),
            Self::VfmreB => write!(f, "vfmre.b"),
            Self::VfmreRB => write!(f, "vfmre.r.b"),
            Self::VfsgnjB => write!(f, "vfsgnj.b"),
            Self::VfsgnjRB => write!(f, "vfsgnj.r.b"),
            Self::VfsgnjnB => write!(f, "vfsgnjn.b"),
            Self::VfsgnjnRB => write!(f, "vfsgnjn.r.b"),
            Self::VfsgnjxB => write!(f, "vfsgnjx.b"),
            Self::VfsgnjxRB => write!(f, "vfsgnjx.r.b"),
            Self::VfeqB => write!(f, "vfeq.b"),
            Self::VfeqRB => write!(f, "vfeq.r.b"),
            Self::VfneB => write!(f, "vfne.b"),
            Self::VfneRB => write!(f, "vfne.r.b"),
            Self::VfltB => write!(f, "vflt.b"),
            Self::VfltRB => write!(f, "vflt.r.b"),
            Self::VfgeB => write!(f, "vfge.b"),
            Self::VfgeRB => write!(f, "vfge.r.b"),
            Self::VfleB => write!(f, "vfle.b"),
            Self::VfleRB => write!(f, "vfle.r.b"),
            Self::VfgtB => write!(f, "vfgt.b"),
            Self::VfgtRB => write!(f, "vfgt.r.b"),
            Self::VfcpkaBS => write!(f, "vfcpka.b.s"),
            Self::VfcpkbBS => write!(f, "vfcpkb.b.s"),
            Self::VfcpkcBS => write!(f, "vfcpkc.b.s"),
            Self::VfcpkdBS => write!(f, "vfcpkd.b.s"),
            Self::VfcpkaBD => write!(f, "vfcpka.b.d"),
            Self::VfcpkbBD => write!(f, "vfcpkb.b.d"),
            Self::VfcpkcBD => write!(f, "vfcpkc.b.d"),
            Self::VfcpkdBD => write!(f, "vfcpkd.b.d"),
            Self::VfdotpexSH => write!(f, "vfdotpex.s.h"),
            Self::VfdotpexSRH => write!(f, "vfdotpex.s.r.h"),
            Self::VfndotpexSH => write!(f, "vfndotpex.s.h"),
            Self::VfndotpexSRH => write!(f, "vfndotpex.s.r.h"),
            Self::VfdotpexHB => write!(f, "vfdotpex.h.b"),
            Self::VfdotpexHRB => write!(f, "vfdotpex.h.r.b"),
            Self::VfndotpexHB => write!(f, "vfndotpex.h.b"),
            Self::VfndotpexHRB => write!(f, "vfndotpex.h.r.b"),
        }
    }
}

/// The `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamt {
    pub op: OpcodeRdRs1Shamt,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamt: u32,
}

impl FormatRdRs1Shamt {}

/// Opcodes with the `RdRs1Shamt` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamt {
    Slli,
    Srli,
    Srai,
}

impl std::fmt::Display for FormatRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamt={:x}", self.shamt)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamt {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slli => write!(f, "slli"),
            Self::Srli => write!(f, "srli"),
            Self::Srai => write!(f, "srai"),
        }
    }
}

/// The `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs1Shamtw {
    pub op: OpcodeRdRs1Shamtw,
    pub raw: u32,
    pub rd: u32,
    pub rs1: u32,
    pub shamtw: u32,
}

impl FormatRdRs1Shamtw {}

/// Opcodes with the `RdRs1Shamtw` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs1Shamtw {
    Slliw,
    Srliw,
    Sraiw,
}

impl std::fmt::Display for FormatRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " shamtw={:x}", self.shamtw)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs1Shamtw {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Slliw => write!(f, "slliw"),
            Self::Srliw => write!(f, "srliw"),
            Self::Sraiw => write!(f, "sraiw"),
        }
    }
}

/// The `RdRs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRdRs2 {
    pub op: OpcodeRdRs2,
    pub raw: u32,
    pub rd: u32,
    pub rs2: u32,
}

impl FormatRdRs2 {}

/// Opcodes with the `RdRs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRdRs2 {
    Dmstat,
    Scfgr,
}

impl std::fmt::Display for FormatRdRs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rd={:x}", self.rd)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRdRs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmstat => write!(f, "dmstat"),
            Self::Scfgr => write!(f, "scfgr"),
        }
    }
}

/// The `Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1 {
    pub op: OpcodeRs1,
    pub raw: u32,
    pub rs1: u32,
}

impl FormatRs1 {}

/// Opcodes with the `Rs1` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1 {
    Dmrep,
}

impl std::fmt::Display for FormatRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Dmrep => write!(f, "dmrep"),
        }
    }
}

/// The `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub struct FormatRs1Rs2 {
    pub op: OpcodeRs1Rs2,
    pub raw: u32,
    pub rs1: u32,
    pub rs2: u32,
}

impl FormatRs1Rs2 {}

/// Opcodes with the `Rs1Rs2` instruction format.
#[derive(Debug, Copy, Clone)]
pub enum OpcodeRs1Rs2 {
    HfenceVvma,
    HfenceGvma,
    HsvB,
    HsvH,
    HsvW,
    HsvD,
    SfenceVma,
    Dmsrc,
    Dmdst,
    Dmstr,
    Scfgw,
}

impl std::fmt::Display for FormatRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.op)?;
        write!(f, " rs1={:x}", self.rs1)?;
        write!(f, " rs2={:x}", self.rs2)?;
        Ok(())
    }
}

impl std::fmt::Display for OpcodeRs1Rs2 {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::HfenceVvma => write!(f, "hfence.vvma"),
            Self::HfenceGvma => write!(f, "hfence.gvma"),
            Self::HsvB => write!(f, "hsv.b"),
            Self::HsvH => write!(f, "hsv.h"),
            Self::HsvW => write!(f, "hsv.w"),
            Self::HsvD => write!(f, "hsv.d"),
            Self::SfenceVma => write!(f, "sfence.vma"),
            Self::Dmsrc => write!(f, "dmsrc"),
            Self::Dmdst => write!(f, "dmdst"),
            Self::Dmstr => write!(f, "dmstr"),
            Self::Scfgw => write!(f, "scfgw"),
        }
    }
}

/// Parse a `u32` into an instruction.
pub fn parse_u32(raw: u32) -> Format {
    match raw & 0x7f {
        0x6f => return parse_jimm20_rd(OpcodeJimm20Rd::Jal, raw),
        0x37 => return parse_imm20_rd(OpcodeImm20Rd::Lui, raw),
        0x17 => return parse_imm20_rd(OpcodeImm20Rd::Auipc, raw),
        0x3f => return parse_imm12_rd_rm_rs1(OpcodeImm12RdRmRs1::Irep, raw),
        _ => (),
    }
    match raw & 0xff {
        0x8b => {
            return parse_imm12_rs1_stagger_mask_stagger_max(
                OpcodeImm12Rs1StaggerMaskStaggerMax::FrepO,
                raw,
            )
        }
        0xb => {
            return parse_imm12_rs1_stagger_mask_stagger_max(
                OpcodeImm12Rs1StaggerMaskStaggerMax::FrepI,
                raw,
            )
        }
        _ => (),
    }
    match raw & 0x707f {
        0x63 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Beq, raw),
        0x1063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bne, raw),
        0x4063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Blt, raw),
        0x5063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bge, raw),
        0x6063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bltu, raw),
        0x7063 => return parse_bimm12hi_bimm12lo_rs1_rs2(OpcodeBimm12hiBimm12loRs1Rs2::Bgeu, raw),
        0x67 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Jalr, raw),
        0x13 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addi, raw),
        0x2013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Slti, raw),
        0x3013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Sltiu, raw),
        0x4013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Xori, raw),
        0x6013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ori, raw),
        0x7013 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Andi, raw),
        0x3 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lb, raw),
        0x1003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lh, raw),
        0x2003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lw, raw),
        0x4003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lbu, raw),
        0x5003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lhu, raw),
        0x23 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sb, raw),
        0x1023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sh, raw),
        0x2023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sw, raw),
        0xf => return parse_fm_pred_rd_rs1_succ(OpcodeFmPredRdRs1Succ::Fence, raw),
        0x100f => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::FenceI, raw),
        0x1b => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Addiw, raw),
        0x3003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Ld, raw),
        0x6003 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Lwu, raw),
        0x3023 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Sd, raw),
        0x2007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flw, raw),
        0x2027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsw, raw),
        0x3007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Fld, raw),
        0x3027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsd, raw),
        0x4007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flq, raw),
        0x4027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsq, raw),
        0x1073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrw, raw),
        0x2073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrs, raw),
        0x3073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrc, raw),
        0x5073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrwi, raw),
        0x6073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrsi, raw),
        0x7073 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Csrrci, raw),
        0x2063 => {
            return parse_bimm12hi_bimm12lo_imm5_rs1(OpcodeBimm12hiBimm12loImm5Rs1::PBeqimm, raw)
        }
        0x3063 => {
            return parse_bimm12hi_bimm12lo_imm5_rs1(OpcodeBimm12hiBimm12loImm5Rs1::PBneimm, raw)
        }
        0x1007 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flh, raw),
        0x1027 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsh, raw),
        0x7 => return parse_imm12_rd_rs1(OpcodeImm12RdRs1::Flb, raw),
        0x27 => return parse_imm12hi_imm12lo_rs1_rs2(OpcodeImm12hiImm12loRs1Rs2::Fsb, raw),
        _ => (),
    }
    match raw & 0x7fff {
        0x202b => return parse_imm12_rs1(OpcodeImm12Rs1::Scfgwi, raw),
        _ => (),
    }
    match raw & 0xe003 {
        0x0 => return parse_unit(OpcodeUnit::CAddi4spn, raw),
        0x2000 => return parse_unit(OpcodeUnit::CFld, raw),
        0x4000 => return parse_unit(OpcodeUnit::CLw, raw),
        0x6000 => return parse_unit(OpcodeUnit::CFlw, raw),
        0xa000 => return parse_unit(OpcodeUnit::CFsd, raw),
        0xc000 => return parse_unit(OpcodeUnit::CSw, raw),
        0xe000 => return parse_unit(OpcodeUnit::CFsw, raw),
        0x1 => return parse_unit(OpcodeUnit::CAddi, raw),
        0x2001 => return parse_unit(OpcodeUnit::CJal, raw),
        0x4001 => return parse_unit(OpcodeUnit::CLi, raw),
        0x6001 => return parse_unit(OpcodeUnit::CLui, raw),
        0xa001 => return parse_unit(OpcodeUnit::CJ, raw),
        0xc001 => return parse_unit(OpcodeUnit::CBeqz, raw),
        0xe001 => return parse_unit(OpcodeUnit::CBnez, raw),
        0x2 => return parse_unit(OpcodeUnit::CSlli, raw),
        0x2002 => return parse_unit(OpcodeUnit::CFldsp, raw),
        0x4002 => return parse_unit(OpcodeUnit::CLwsp, raw),
        0x6002 => return parse_unit(OpcodeUnit::CFlwsp, raw),
        0xa002 => return parse_unit(OpcodeUnit::CFsdsp, raw),
        0xc002 => return parse_unit(OpcodeUnit::CSwsp, raw),
        0xe002 => return parse_unit(OpcodeUnit::CFswsp, raw),
        _ => (),
    }
    match raw & 0xec03 {
        0x8001 => return parse_unit(OpcodeUnit::CSrli, raw),
        0x8401 => return parse_unit(OpcodeUnit::CSrai, raw),
        0x8801 => return parse_unit(OpcodeUnit::CAndi, raw),
        _ => (),
    }
    match raw & 0xf003 {
        0x8002 => return parse_unit(OpcodeUnit::CMv, raw),
        0x9002 => return parse_unit(OpcodeUnit::CAdd, raw),
        _ => (),
    }
    match raw & 0xfc63 {
        0x8c01 => return parse_unit(OpcodeUnit::CSub, raw),
        0x8c21 => return parse_unit(OpcodeUnit::CXor, raw),
        0x8c41 => return parse_unit(OpcodeUnit::COr, raw),
        0x8c61 => return parse_unit(OpcodeUnit::CAnd, raw),
        0x9c01 => return parse_unit(OpcodeUnit::CSubw, raw),
        0x9c21 => return parse_unit(OpcodeUnit::CAddw, raw),
        _ => (),
    }
    match raw & 0xff07f {
        0x102b => return parse_imm12_rd(OpcodeImm12Rd::Scfgri, raw),
        _ => (),
    }
    match raw & 0x600007f {
        0x43 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddS, raw),
        0x47 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubS, raw),
        0x4b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubS, raw),
        0x4f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddS, raw),
        0x2000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddD, raw),
        0x2000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubD, raw),
        0x200004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubD, raw),
        0x200004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddD, raw),
        0x6000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddQ, raw),
        0x6000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubQ, raw),
        0x600004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubQ, raw),
        0x600004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddQ, raw),
        0x4000043 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmaddH, raw),
        0x4000047 => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FmsubH, raw),
        0x400004b => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmsubH, raw),
        0x400004f => return parse_rd_rm_rs1_rs2_rs3(OpcodeRdRmRs1Rs2Rs3::FnmaddH, raw),
        _ => (),
    }
    match raw & 0xc000707f {
        0xc0000033 => return parse_luimm5_imm5_rd_rs1(OpcodeLuimm5Imm5RdRs1::PExtract, raw),
        0xc0001033 => return parse_luimm5_imm5_rd_rs1(OpcodeLuimm5Imm5RdRs1::PExtractu, raw),
        0xc0002033 => return parse_luimm5_imm5_rd_rs1(OpcodeLuimm5Imm5RdRs1::PInsert, raw),
        0xc0004033 => return parse_luimm5_imm5_rd_rs1(OpcodeLuimm5Imm5RdRs1::PBset, raw),
        0xc0003033 => return parse_luimm5_imm5_rd_rs1(OpcodeLuimm5Imm5RdRs1::PBclr, raw),
        0x205b => return parse_luimm5_rd_rs1_rs2(OpcodeLuimm5RdRs1Rs2::PAddn, raw),
        0x8000205b => return parse_luimm5_rd_rs1_rs2(OpcodeLuimm5RdRs1Rs2::PAddun, raw),
        _ => (),
    }
    match raw & 0xf800707f {
        0x202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddW, raw),
        0x2000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorW, raw),
        0x4000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorW, raw),
        0x6000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandW, raw),
        0x8000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominW, raw),
        0xa000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxW, raw),
        0xc000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuW, raw),
        0xe000202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuW, raw),
        0x800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapW, raw),
        0x1800202f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScW, raw),
        0x302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoaddD, raw),
        0x2000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoxorD, raw),
        0x4000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoorD, raw),
        0x6000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoandD, raw),
        0x8000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominD, raw),
        0xa000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxD, raw),
        0xc000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmominuD, raw),
        0xe000302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmomaxuD, raw),
        0x800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::AmoswapD, raw),
        0x1800302f => return parse_aqrl_rd_rs1_rs2(OpcodeAqrlRdRs1Rs2::ScD, raw),
        _ => (),
    }
    match raw & 0xf9f0707f {
        0x1000202f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrW, raw),
        0x1000302f => return parse_aqrl_rd_rs1(OpcodeAqrlRdRs1::LrD, raw),
        _ => (),
    }
    match raw & 0xfc00707f {
        0x1013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Slli, raw),
        0x5013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srli, raw),
        0x40005013 => return parse_rd_rs1_shamt(OpcodeRdRs1Shamt::Srai, raw),
        0x6057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAddSciH, raw),
        0x7057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAddSciB, raw),
        0x8006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSubSciH, raw),
        0x8007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSubSciB, raw),
        0x10006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAvgSciH, raw),
        0x10007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAvgSciB, raw),
        0x18006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAvguSciH, raw),
        0x18007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAvguSciB, raw),
        0x20006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMinSciH, raw),
        0x20007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMinSciB, raw),
        0x28006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMinuSciH, raw),
        0x28007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMinuSciB, raw),
        0x30006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMaxSciH, raw),
        0x30007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMaxSciB, raw),
        0x38006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMaxuSciH, raw),
        0x38007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvMaxuSciB, raw),
        0x40006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSrlSciH, raw),
        0x40007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSrlSciB, raw),
        0x48006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSraSciH, raw),
        0x48007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSraSciB, raw),
        0x50006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSllSciH, raw),
        0x50007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSllSciB, raw),
        0x58006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvOrSciH, raw),
        0x58007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvOrSciB, raw),
        0x60006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvXorSciH, raw),
        0x60007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvXorSciB, raw),
        0x68006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAndSciH, raw),
        0x68007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvAndSciB, raw),
        0x78006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvExtractH, raw),
        0x78007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvExtractB, raw),
        0x90006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvExtractuH, raw),
        0x90007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvExtractuB, raw),
        0xb0006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvInsertH, raw),
        0xb0007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvInsertB, raw),
        0x98006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotspSciH, raw),
        0x98007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotspSciB, raw),
        0x80006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotupSciH, raw),
        0x80007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotupSciB, raw),
        0x88006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotuspSciH, raw),
        0x88007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvDotuspSciB, raw),
        0xb8006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotspSciH, raw),
        0xb8007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotspSciB, raw),
        0xa0006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotupSciH, raw),
        0xa0007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotupSciB, raw),
        0xa8006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotuspSciH, raw),
        0xa8007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvSdotuspSciB, raw),
        0x4006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpeqSciH, raw),
        0x4007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpeqSciB, raw),
        0xc006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpneSciH, raw),
        0xc007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpneSciB, raw),
        0x14006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgtSciH, raw),
        0x14007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgtSciB, raw),
        0x1c006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgeSciH, raw),
        0x1c007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgeSciB, raw),
        0x24006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpltSciH, raw),
        0x24007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpltSciB, raw),
        0x2c006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpleSciH, raw),
        0x2c007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpleSciB, raw),
        0x34006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgtuSciH, raw),
        0x34007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgtuSciB, raw),
        0x3c006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgeuSciH, raw),
        0x3c007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpgeuSciB, raw),
        0x44006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpltuSciH, raw),
        0x44007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpltuSciB, raw),
        0x4c006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpleuSciH, raw),
        0x4c007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvCmpleuSciB, raw),
        0xc0006057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvShuffleSciH, raw),
        0xc0007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvShufflei0SciB, raw),
        0xe8007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvShufflei1SciB, raw),
        0xf0007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvShufflei2SciB, raw),
        0xf8007057 => return parse_imm6_rd_rs1(OpcodeImm6RdRs1::PvShufflei3SciB, raw),
        _ => (),
    }
    match raw & 0xfe00007f {
        0x53 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddS, raw),
        0x8000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubS, raw),
        0x10000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulS, raw),
        0x18000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivS, raw),
        0x2000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddD, raw),
        0xa000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubD, raw),
        0x12000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulD, raw),
        0x1a000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivD, raw),
        0x6000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddQ, raw),
        0xe000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubQ, raw),
        0x16000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulQ, raw),
        0x1e000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivQ, raw),
        0x4000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FaddH, raw),
        0xc000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FsubH, raw),
        0x14000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulH, raw),
        0x1c000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FdivH, raw),
        0x4c000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulexSH, raw),
        0x54000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmacexSH, raw),
        0x4e000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmulexSB, raw),
        0x56000053 => return parse_rd_rm_rs1_rs2(OpcodeRdRmRs1Rs2::FmacexSB, raw),
        _ => (),
    }
    match raw & 0xfe00707f {
        0x33 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Add, raw),
        0x40000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sub, raw),
        0x1033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sll, raw),
        0x2033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Slt, raw),
        0x3033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sltu, raw),
        0x4033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Xor, raw),
        0x5033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srl, raw),
        0x40005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sra, raw),
        0x6033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Or, raw),
        0x7033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::And, raw),
        0x101b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Slliw, raw),
        0x501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Srliw, raw),
        0x4000501b => return parse_rd_rs1_shamtw(OpcodeRdRs1Shamtw::Sraiw, raw),
        0x3b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Addw, raw),
        0x4000003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Subw, raw),
        0x103b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sllw, raw),
        0x503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Srlw, raw),
        0x4000503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Sraw, raw),
        0x2000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mul, raw),
        0x2001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulh, raw),
        0x2002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhsu, raw),
        0x2003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulhu, raw),
        0x2004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Div, raw),
        0x2005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divu, raw),
        0x2006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Rem, raw),
        0x2007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remu, raw),
        0x200003b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Mulw, raw),
        0x200403b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divw, raw),
        0x200503b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Divuw, raw),
        0x200603b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remw, raw),
        0x200703b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Remuw, raw),
        0x20000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjS, raw),
        0x20001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnS, raw),
        0x20002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxS, raw),
        0x28000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminS, raw),
        0x28001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxS, raw),
        0xa0000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleS, raw),
        0xa0001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltS, raw),
        0xa0002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqS, raw),
        0x22000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjD, raw),
        0x22001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnD, raw),
        0x22002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxD, raw),
        0x2a000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminD, raw),
        0x2a001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxD, raw),
        0xa2000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleD, raw),
        0xa2001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltD, raw),
        0xa2002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqD, raw),
        0x26000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjQ, raw),
        0x26001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnQ, raw),
        0x26002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxQ, raw),
        0x2e000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminQ, raw),
        0x2e001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxQ, raw),
        0xa6000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleQ, raw),
        0xa6001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltQ, raw),
        0xa6002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqQ, raw),
        0x80000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PExtractr, raw),
        0x80001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PExtractur, raw),
        0x80002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PInsertr, raw),
        0x80004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PBsetr, raw),
        0x80003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PBclrr, raw),
        0x10003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PCnt, raw),
        0x14001033 => return parse_imm5_rd_rs1(OpcodeImm5RdRs1::PClip, raw),
        0x14005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PClipr, raw),
        0x14002033 => return parse_imm5_rd_rs1(OpcodeImm5RdRs1::PClipu, raw),
        0x14006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PClipur, raw),
        0x42000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMac, raw),
        0x42001033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMsu, raw),
        0x4004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMin, raw),
        0x4005033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMinu, raw),
        0x4006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMax, raw),
        0x4007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PMaxu, raw),
        0x4002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PSlet, raw),
        0x4003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PSletu, raw),
        0x57 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddH, raw),
        0x4057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddScH, raw),
        0x1057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddB, raw),
        0x5057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddScB, raw),
        0x8000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubH, raw),
        0x8004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubScH, raw),
        0x8001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubB, raw),
        0x8005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubScB, raw),
        0x10000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvgH, raw),
        0x10004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvgScH, raw),
        0x10001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvgB, raw),
        0x10005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvgScB, raw),
        0x18000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvguH, raw),
        0x18004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvguScH, raw),
        0x18001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvguB, raw),
        0x18005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAvguScB, raw),
        0x20000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinH, raw),
        0x20004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinScH, raw),
        0x20001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinB, raw),
        0x20005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinScB, raw),
        0x28000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinuH, raw),
        0x28004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinuScH, raw),
        0x28001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinuB, raw),
        0x28005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMinuScB, raw),
        0x30000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxH, raw),
        0x30004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxScH, raw),
        0x30001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxB, raw),
        0x30005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxScB, raw),
        0x38000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxuH, raw),
        0x38004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxuScH, raw),
        0x38001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxuB, raw),
        0x38005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvMaxuScB, raw),
        0x40000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSrlH, raw),
        0x40004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSrlScH, raw),
        0x40001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSrlB, raw),
        0x40005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSrlScB, raw),
        0x48000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSraH, raw),
        0x48004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSraScH, raw),
        0x48001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSraB, raw),
        0x48005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSraScB, raw),
        0x50000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSllH, raw),
        0x50004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSllScH, raw),
        0x50001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSllB, raw),
        0x50005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSllScB, raw),
        0x58000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvOrH, raw),
        0x58004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvOrScH, raw),
        0x58001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvOrB, raw),
        0x58005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvOrScB, raw),
        0x60000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvXorH, raw),
        0x60004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvXorScH, raw),
        0x60001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvXorB, raw),
        0x60005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvXorScB, raw),
        0x68000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAndH, raw),
        0x68004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAndScH, raw),
        0x68001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAndB, raw),
        0x68005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAndScB, raw),
        0x98000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotspH, raw),
        0x98004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotspScH, raw),
        0x98001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotspB, raw),
        0x98005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotspScB, raw),
        0x80000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotupH, raw),
        0x80004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotupScH, raw),
        0x80001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotupB, raw),
        0x80005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotupScB, raw),
        0x88000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotuspH, raw),
        0x88004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotuspScH, raw),
        0x88001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotuspB, raw),
        0x88005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvDotuspScB, raw),
        0xb8000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotspH, raw),
        0xb8004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotspScH, raw),
        0xb8001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotspB, raw),
        0xb8005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotspScB, raw),
        0xa0000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotupH, raw),
        0xa0004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotupScH, raw),
        0xa0001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotupB, raw),
        0xa0005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotupScB, raw),
        0xa8000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotuspH, raw),
        0xa8004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotuspScH, raw),
        0xa8001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotuspB, raw),
        0xa8005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSdotuspScB, raw),
        0x4000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpeqH, raw),
        0x4004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpeqScH, raw),
        0x4001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpeqB, raw),
        0x4005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpeqScB, raw),
        0xc000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpneH, raw),
        0xc004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpneScH, raw),
        0xc001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpneB, raw),
        0xc005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpneScB, raw),
        0x14000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtH, raw),
        0x14004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtScH, raw),
        0x14001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtB, raw),
        0x14005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtScB, raw),
        0x1c000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeH, raw),
        0x1c004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeScH, raw),
        0x1c001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeB, raw),
        0x1c005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeScB, raw),
        0x24000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltH, raw),
        0x24004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltScH, raw),
        0x24001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltB, raw),
        0x24005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltScB, raw),
        0x2c000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleH, raw),
        0x2c004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleScH, raw),
        0x2c001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleB, raw),
        0x2c005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleScB, raw),
        0x34000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtuH, raw),
        0x34004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtuScH, raw),
        0x34001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtuB, raw),
        0x34005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgtuScB, raw),
        0x3c000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeuH, raw),
        0x3c004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeuScH, raw),
        0x3c001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeuB, raw),
        0x3c005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpgeuScB, raw),
        0x44000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltuH, raw),
        0x44004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltuScH, raw),
        0x44001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltuB, raw),
        0x44005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpltuScB, raw),
        0x4c000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleuH, raw),
        0x4c004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleuScH, raw),
        0x4c001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleuB, raw),
        0x4c005057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvCmpleuScB, raw),
        0x74002057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddHDiv2, raw),
        0x74004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddHDiv4, raw),
        0x74006057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvAddHDiv8, raw),
        0x64002057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubHDiv2, raw),
        0x64004057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubHDiv4, raw),
        0x64006057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvSubHDiv8, raw),
        0xc0000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvShuffleH, raw),
        0xc0001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvShuffleB, raw),
        0xc8000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvShuffle2H, raw),
        0xc8001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvShuffle2B, raw),
        0xd0000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvPack, raw),
        0xd2000057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvPackH, raw),
        0xd8001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvPackhiB, raw),
        0xe0001057 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::PvPackloB, raw),
        0x400002b => return parse_imm5_rd_rs1(OpcodeImm5RdRs1::Dmcpyi, raw),
        0x600002b => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::Dmcpy, raw),
        0x24000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjH, raw),
        0x24001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjnH, raw),
        0x24002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FsgnjxH, raw),
        0x2c000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FminH, raw),
        0x2c001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FmaxH, raw),
        0xa4002053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FeqH, raw),
        0xa4001053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FltH, raw),
        0xa4000053 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::FleH, raw),
        0x82000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddS, raw),
        0x82004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddRS, raw),
        0x84000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubS, raw),
        0x84004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubRS, raw),
        0x86000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulS, raw),
        0x86004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulRS, raw),
        0x88000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivS, raw),
        0x88004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivRS, raw),
        0x8a000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminS, raw),
        0x8a004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminRS, raw),
        0x8c000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxS, raw),
        0x8c004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxRS, raw),
        0x90000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacS, raw),
        0x90004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacRS, raw),
        0x92000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreS, raw),
        0x92004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreRS, raw),
        0x9a000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjS, raw),
        0x9a004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjRS, raw),
        0x9c000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnS, raw),
        0x9c004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnRS, raw),
        0x9e000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxS, raw),
        0x9e004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxRS, raw),
        0xa0000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqS, raw),
        0xa0004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqRS, raw),
        0xa2000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneS, raw),
        0xa2004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneRS, raw),
        0xa4000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltS, raw),
        0xa4004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltRS, raw),
        0xa6000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeS, raw),
        0xa6004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeRS, raw),
        0xa8000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleS, raw),
        0xa8004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleRS, raw),
        0xaa000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtS, raw),
        0xaa004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtRS, raw),
        0xb0000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaSS, raw),
        0xb0004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbSS, raw),
        0xb2000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcSS, raw),
        0xb2004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdSS, raw),
        0xb4000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaSD, raw),
        0xb4004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbSD, raw),
        0xb6000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcSD, raw),
        0xb6004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdSD, raw),
        0x82002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddH, raw),
        0x82006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddRH, raw),
        0x84002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubH, raw),
        0x84006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubRH, raw),
        0x86002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulH, raw),
        0x86006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulRH, raw),
        0x88002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivH, raw),
        0x88006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivRH, raw),
        0x8a002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminH, raw),
        0x8a006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminRH, raw),
        0x8c002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxH, raw),
        0x8c006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxRH, raw),
        0x90002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacH, raw),
        0x90006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacRH, raw),
        0x92002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreH, raw),
        0x92006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreRH, raw),
        0x9a002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjH, raw),
        0x9a006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjRH, raw),
        0x9c002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnH, raw),
        0x9c006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnRH, raw),
        0x9e002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxH, raw),
        0x9e006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxRH, raw),
        0xa0002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqH, raw),
        0xa0006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqRH, raw),
        0xa2002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneH, raw),
        0xa2006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneRH, raw),
        0xa4002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltH, raw),
        0xa4006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltRH, raw),
        0xa6002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeH, raw),
        0xa6006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeRH, raw),
        0xa8002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleH, raw),
        0xa8006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleRH, raw),
        0xaa002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtH, raw),
        0xaa006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtRH, raw),
        0xb0002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaHS, raw),
        0xb0006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbHS, raw),
        0xb2002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcHS, raw),
        0xb2006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdHS, raw),
        0xb4002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaHD, raw),
        0xb4006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbHD, raw),
        0xb6002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcHD, raw),
        0xb6006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdHD, raw),
        0x82003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddB, raw),
        0x82007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfaddRB, raw),
        0x84003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubB, raw),
        0x84007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsubRB, raw),
        0x86003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulB, raw),
        0x86007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmulRB, raw),
        0x88003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivB, raw),
        0x88007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdivRB, raw),
        0x8a003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminB, raw),
        0x8a007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfminRB, raw),
        0x8c003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxB, raw),
        0x8c007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmaxRB, raw),
        0x90003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacB, raw),
        0x90007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmacRB, raw),
        0x92003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreB, raw),
        0x92007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfmreRB, raw),
        0x9a003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjB, raw),
        0x9a007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjRB, raw),
        0x9c003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnB, raw),
        0x9c007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjnRB, raw),
        0x9e003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxB, raw),
        0x9e007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfsgnjxRB, raw),
        0xa0003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqB, raw),
        0xa0007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfeqRB, raw),
        0xa2003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneB, raw),
        0xa2007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfneRB, raw),
        0xa4003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltB, raw),
        0xa4007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfltRB, raw),
        0xa6003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeB, raw),
        0xa6007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgeRB, raw),
        0xa8003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleB, raw),
        0xa8007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfleRB, raw),
        0xaa003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtB, raw),
        0xaa007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfgtRB, raw),
        0xb0003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaBS, raw),
        0xb0007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbBS, raw),
        0xb2003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcBS, raw),
        0xb2007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdBS, raw),
        0xb4003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkaBD, raw),
        0xb4007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkbBD, raw),
        0xb6003033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkcBD, raw),
        0xb6007033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfcpkdBD, raw),
        0x96000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdotpexSH, raw),
        0x96004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdotpexSRH, raw),
        0xba000033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfndotpexSH, raw),
        0xba004033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfndotpexSRH, raw),
        0x96002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdotpexHB, raw),
        0x96006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfdotpexHRB, raw),
        0xba002033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfndotpexHB, raw),
        0xba006033 => return parse_rd_rs1_rs2(OpcodeRdRs1Rs2::VfndotpexHRB, raw),
        _ => (),
    }
    match raw & 0xfe007fff {
        0x22000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceVvma, raw),
        0x62000073 => return parse_rs1_rs2(OpcodeRs1Rs2::HfenceGvma, raw),
        0x62004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvB, raw),
        0x66004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvH, raw),
        0x6a004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvW, raw),
        0x6e004073 => return parse_rs1_rs2(OpcodeRs1Rs2::HsvD, raw),
        0x12000073 => return parse_rs1_rs2(OpcodeRs1Rs2::SfenceVma, raw),
        0x2b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmsrc, raw),
        0x200002b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmdst, raw),
        0xc00002b => return parse_rs1_rs2(OpcodeRs1Rs2::Dmstr, raw),
        0x20ab => return parse_rs1_rs2(OpcodeRs1Rs2::Scfgw, raw),
        _ => (),
    }
    match raw & 0xfe0ff07f {
        0x800002b => return parse_imm5_rd(OpcodeImm5Rd::Dmstati, raw),
        0xa00002b => return parse_rd_rs2(OpcodeRdRs2::Dmstat, raw),
        0x902b => return parse_rd_rs2(OpcodeRdRs2::Scfgr, raw),
        _ => (),
    }
    match raw & 0xfff0007f {
        0x58000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtS, raw),
        0xc0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWS, raw),
        0xc0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuS, raw),
        0xd0000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSW, raw),
        0xd0100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSWu, raw),
        0xc0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLS, raw),
        0xc0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuS, raw),
        0xd0200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSL, raw),
        0xd0300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSLu, raw),
        0x40100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSD, raw),
        0x42000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDS, raw),
        0x5a000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtD, raw),
        0xc2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWD, raw),
        0xc2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuD, raw),
        0xd2000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDW, raw),
        0xd2100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDWu, raw),
        0xc2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLD, raw),
        0xc2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuD, raw),
        0xd2200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDL, raw),
        0xd2300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDLu, raw),
        0x40300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtSQ, raw),
        0x46000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQS, raw),
        0x42300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtDQ, raw),
        0x46100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQD, raw),
        0x5e000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtQ, raw),
        0xc6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWQ, raw),
        0xc6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuQ, raw),
        0xd6000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQW, raw),
        0xd6100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQWu, raw),
        0xc6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLQ, raw),
        0xc6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuQ, raw),
        0xd6200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQL, raw),
        0xd6300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtQLu, raw),
        0x5c000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FsqrtH, raw),
        0xc4000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWH, raw),
        0xc4100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtWuH, raw),
        0xd4000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHW, raw),
        0xd4100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHWu, raw),
        0xc4200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLH, raw),
        0xc4300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtLuH, raw),
        0xd4200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHL, raw),
        0xd4300053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHLu, raw),
        0x44000053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHS, raw),
        0x44100053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHD, raw),
        0x44200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtHH, raw),
        0x46200053 => return parse_rd_rm_rs1(OpcodeRdRmRs1::FcvtBH, raw),
        _ => (),
    }
    match raw & 0xfff0707f {
        0x60004073 => return parse_rd_rs1(OpcodeRdRs1::HlvB, raw),
        0x60104073 => return parse_rd_rs1(OpcodeRdRs1::HlvBu, raw),
        0x64004073 => return parse_rd_rs1(OpcodeRdRs1::HlvH, raw),
        0x64104073 => return parse_rd_rs1(OpcodeRdRs1::HlvHu, raw),
        0x64304073 => return parse_rd_rs1(OpcodeRdRs1::HlvxHu, raw),
        0x68004073 => return parse_rd_rs1(OpcodeRdRs1::HlvW, raw),
        0x68304073 => return parse_rd_rs1(OpcodeRdRs1::HlvxWu, raw),
        0x68104073 => return parse_rd_rs1(OpcodeRdRs1::HlvWu, raw),
        0x6c004073 => return parse_rd_rs1(OpcodeRdRs1::HlvD, raw),
        0xe0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXW, raw),
        0xe0001053 => return parse_rd_rs1(OpcodeRdRs1::FclassS, raw),
        0xf0000053 => return parse_rd_rs1(OpcodeRdRs1::FmvWX, raw),
        0xe2001053 => return parse_rd_rs1(OpcodeRdRs1::FclassD, raw),
        0xe2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXD, raw),
        0xf2000053 => return parse_rd_rs1(OpcodeRdRs1::FmvDX, raw),
        0xe6001053 => return parse_rd_rs1(OpcodeRdRs1::FclassQ, raw),
        0x4000033 => return parse_rd_rs1(OpcodeRdRs1::PAbs, raw),
        0x10004033 => return parse_rd_rs1(OpcodeRdRs1::PExths, raw),
        0x10005033 => return parse_rd_rs1(OpcodeRdRs1::PExthz, raw),
        0x10006033 => return parse_rd_rs1(OpcodeRdRs1::PExtbs, raw),
        0x10007033 => return parse_rd_rs1(OpcodeRdRs1::PExtbz, raw),
        0x10002033 => return parse_rd_rs1(OpcodeRdRs1::PClb, raw),
        0x10001033 => return parse_rd_rs1(OpcodeRdRs1::PFl1, raw),
        0x10000033 => return parse_rd_rs1(OpcodeRdRs1::PFf1, raw),
        0x8005033 => return parse_rd_rs1(OpcodeRdRs1::PRor, raw),
        0x70000057 => return parse_rd_rs1(OpcodeRdRs1::PvAbsH, raw),
        0x70001057 => return parse_rd_rs1(OpcodeRdRs1::PvAbsB, raw),
        0xe4000053 => return parse_rd_rs1(OpcodeRdRs1::FmvXH, raw),
        0xe4001053 => return parse_rd_rs1(OpcodeRdRs1::FclassH, raw),
        0xf4000053 => return parse_rd_rs1(OpcodeRdRs1::FmvHX, raw),
        0x40200053 => return parse_rd_rs1(OpcodeRdRs1::FcvtSH, raw),
        0x42200053 => return parse_rd_rs1(OpcodeRdRs1::FcvtDH, raw),
        0x44300053 => return parse_rd_rs1(OpcodeRdRs1::FcvtHB, raw),
        0x46300053 => return parse_rd_rs1(OpcodeRdRs1::FcvtBB, raw),
        0x8e000033 => return parse_rd_rs1(OpcodeRdRs1::VfsqrtS, raw),
        0x98100033 => return parse_rd_rs1(OpcodeRdRs1::VfclassS, raw),
        0x98000033 => return parse_rd_rs1(OpcodeRdRs1::VfmvXS, raw),
        0x98004033 => return parse_rd_rs1(OpcodeRdRs1::VfmvSX, raw),
        0x98200033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXS, raw),
        0x98204033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXuS, raw),
        0x98300033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtSX, raw),
        0x98304033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtSXu, raw),
        0x98502033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtHH, raw),
        0x98506033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuHH, raw),
        0x8e002033 => return parse_rd_rs1(OpcodeRdRs1::VfsqrtH, raw),
        0x98102033 => return parse_rd_rs1(OpcodeRdRs1::VfclassH, raw),
        0x98002033 => return parse_rd_rs1(OpcodeRdRs1::VfmvXH, raw),
        0x98006033 => return parse_rd_rs1(OpcodeRdRs1::VfmvHX, raw),
        0x98202033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXH, raw),
        0x98206033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXuH, raw),
        0x98302033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtHX, raw),
        0x98306033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtHXu, raw),
        0x98600033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtSH, raw),
        0x98604033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuSH, raw),
        0x98402033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtHS, raw),
        0x98406033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuHS, raw),
        0x8e003033 => return parse_rd_rs1(OpcodeRdRs1::VfsqrtB, raw),
        0x98003033 => return parse_rd_rs1(OpcodeRdRs1::VfmvXB, raw),
        0x98007033 => return parse_rd_rs1(OpcodeRdRs1::VfmvBX, raw),
        0x98103033 => return parse_rd_rs1(OpcodeRdRs1::VfclassB, raw),
        0x98203033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXB, raw),
        0x98207033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtXuB, raw),
        0x98303033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtBX, raw),
        0x98307033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtBXu, raw),
        0x98700033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtSB, raw),
        0x98704033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuSB, raw),
        0x98403033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtBS, raw),
        0x98407033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuBS, raw),
        0x98702033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtHB, raw),
        0x98706033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuHB, raw),
        0x98603033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtBH, raw),
        0x98607033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuBH, raw),
        0x98703033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtBB, raw),
        0x98707033 => return parse_rd_rs1(OpcodeRdRs1::VfcvtuBB, raw),
        0x8fc00033 => return parse_rd_rs1(OpcodeRdRs1::VfsumS, raw),
        0xafc00033 => return parse_rd_rs1(OpcodeRdRs1::VfnsumS, raw),
        0x8fe02033 => return parse_rd_rs1(OpcodeRdRs1::VfsumH, raw),
        0xafe02033 => return parse_rd_rs1(OpcodeRdRs1::VfnsumH, raw),
        0x8e703033 => return parse_rd_rs1(OpcodeRdRs1::VfsumB, raw),
        0xae703033 => return parse_rd_rs1(OpcodeRdRs1::VfnsumB, raw),
        0x8f600033 => return parse_rd_rs1(OpcodeRdRs1::VfsumexSH, raw),
        0xaf600033 => return parse_rd_rs1(OpcodeRdRs1::VfnsumexSH, raw),
        0x8f702033 => return parse_rd_rs1(OpcodeRdRs1::VfsumexHB, raw),
        0xaf702033 => return parse_rd_rs1(OpcodeRdRs1::VfnsumexHB, raw),
        _ => (),
    }
    match raw & 0xfff07fff {
        0xe00002b => return parse_rs1(OpcodeRs1::Dmrep, raw),
        _ => (),
    }
    match raw & 0xffffffff {
        0x73 => return parse_unit(OpcodeUnit::Ecall, raw),
        0x100073 => return parse_unit(OpcodeUnit::Ebreak, raw),
        0x200073 => return parse_unit(OpcodeUnit::Uret, raw),
        0x10200073 => return parse_unit(OpcodeUnit::Sret, raw),
        0x30200073 => return parse_unit(OpcodeUnit::Mret, raw),
        0x7b200073 => return parse_unit(OpcodeUnit::Dret, raw),
        0x10500073 => return parse_unit(OpcodeUnit::Wfi, raw),
        _ => (),
    }
    Format::Illegal(raw)
}

/// Parse the first bytes of a `&[u8]` slice into an instruction.
pub fn parse(mut raw: &[u8]) -> Format {
    use byteorder::{LittleEndian, ReadBytesExt};
    raw.read_u32::<LittleEndian>()
        .map(parse_u32)
        .unwrap_or(Format::Illegal(0))
}

/// Parse an instruction with the `Unit` format.
pub fn parse_unit(op: OpcodeUnit, raw: u32) -> Format {
    Format::Unit(FormatUnit { op, raw })
}

/// Parse an instruction with the `Luimm5Imm5RdRs1` format.
pub fn parse_luimm5_imm5_rd_rs1(op: OpcodeLuimm5Imm5RdRs1, raw: u32) -> Format {
    Format::Luimm5Imm5RdRs1(FormatLuimm5Imm5RdRs1 {
        op,
        raw,
        luimm5: (raw >> 25) & 0x1f,
        imm5: (raw >> 20) & 0x1f,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Luimm5RdRs1Rs2` format.
pub fn parse_luimm5_rd_rs1_rs2(op: OpcodeLuimm5RdRs1Rs2, raw: u32) -> Format {
    Format::Luimm5RdRs1Rs2(FormatLuimm5RdRs1Rs2 {
        op,
        raw,
        luimm5: (raw >> 25) & 0x1f,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `AqrlRdRs1` format.
pub fn parse_aqrl_rd_rs1(op: OpcodeAqrlRdRs1, raw: u32) -> Format {
    Format::AqrlRdRs1(FormatAqrlRdRs1 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `AqrlRdRs1Rs2` format.
pub fn parse_aqrl_rd_rs1_rs2(op: OpcodeAqrlRdRs1Rs2, raw: u32) -> Format {
    Format::AqrlRdRs1Rs2(FormatAqrlRdRs1Rs2 {
        op,
        raw,
        aqrl: (raw >> 25) & 0x3,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Bimm12hiBimm12loImm5Rs1` format.
pub fn parse_bimm12hi_bimm12lo_imm5_rs1(op: OpcodeBimm12hiBimm12loImm5Rs1, raw: u32) -> Format {
    Format::Bimm12hiBimm12loImm5Rs1(FormatBimm12hiBimm12loImm5Rs1 {
        op,
        raw,
        bimm12hi: (raw >> 25) & 0x7f,
        bimm12lo: (raw >> 7) & 0x1f,
        imm5: (raw >> 20) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Bimm12hiBimm12loRs1Rs2` format.
pub fn parse_bimm12hi_bimm12lo_rs1_rs2(op: OpcodeBimm12hiBimm12loRs1Rs2, raw: u32) -> Format {
    Format::Bimm12hiBimm12loRs1Rs2(FormatBimm12hiBimm12loRs1Rs2 {
        op,
        raw,
        bimm12hi: (raw >> 25) & 0x7f,
        bimm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `FmPredRdRs1Succ` format.
pub fn parse_fm_pred_rd_rs1_succ(op: OpcodeFmPredRdRs1Succ, raw: u32) -> Format {
    Format::FmPredRdRs1Succ(FormatFmPredRdRs1Succ {
        op,
        raw,
        fm: (raw >> 28) & 0xf,
        pred: (raw >> 24) & 0xf,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        succ: (raw >> 20) & 0xf,
    })
}

/// Parse an instruction with the `Imm12Rd` format.
pub fn parse_imm12_rd(op: OpcodeImm12Rd, raw: u32) -> Format {
    Format::Imm12Rd(FormatImm12Rd {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12RdRmRs1` format.
pub fn parse_imm12_rd_rm_rs1(op: OpcodeImm12RdRmRs1, raw: u32) -> Format {
    Format::Imm12RdRmRs1(FormatImm12RdRmRs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12RdRs1` format.
pub fn parse_imm12_rd_rs1(op: OpcodeImm12RdRs1, raw: u32) -> Format {
    Format::Imm12RdRs1(FormatImm12RdRs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12Rs1` format.
pub fn parse_imm12_rs1(op: OpcodeImm12Rs1, raw: u32) -> Format {
    Format::Imm12Rs1(FormatImm12Rs1 {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm12Rs1StaggerMaskStaggerMax` format.
pub fn parse_imm12_rs1_stagger_mask_stagger_max(
    op: OpcodeImm12Rs1StaggerMaskStaggerMax,
    raw: u32,
) -> Format {
    Format::Imm12Rs1StaggerMaskStaggerMax(FormatImm12Rs1StaggerMaskStaggerMax {
        op,
        raw,
        imm12: (raw >> 20) & 0xfff,
        rs1: (raw >> 15) & 0x1f,
        stagger_mask: (raw >> 8) & 0xf,
        stagger_max: (raw >> 12) & 0x7,
    })
}

/// Parse an instruction with the `Imm12hiImm12loRs1Rs2` format.
pub fn parse_imm12hi_imm12lo_rs1_rs2(op: OpcodeImm12hiImm12loRs1Rs2, raw: u32) -> Format {
    Format::Imm12hiImm12loRs1Rs2(FormatImm12hiImm12loRs1Rs2 {
        op,
        raw,
        imm12hi: (raw >> 25) & 0x7f,
        imm12lo: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Imm20Rd` format.
pub fn parse_imm20_rd(op: OpcodeImm20Rd, raw: u32) -> Format {
    Format::Imm20Rd(FormatImm20Rd {
        op,
        raw,
        imm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm5Rd` format.
pub fn parse_imm5_rd(op: OpcodeImm5Rd, raw: u32) -> Format {
    Format::Imm5Rd(FormatImm5Rd {
        op,
        raw,
        imm5: (raw >> 20) & 0x1f,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `Imm5RdRs1` format.
pub fn parse_imm5_rd_rs1(op: OpcodeImm5RdRs1, raw: u32) -> Format {
    Format::Imm5RdRs1(FormatImm5RdRs1 {
        op,
        raw,
        imm5: (raw >> 20) & 0x1f,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Imm6RdRs1` format.
pub fn parse_imm6_rd_rs1(op: OpcodeImm6RdRs1, raw: u32) -> Format {
    Format::Imm6RdRs1(FormatImm6RdRs1 {
        op,
        raw,
        imm6: (raw >> 20) & 0x3f,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Jimm20Rd` format.
pub fn parse_jimm20_rd(op: OpcodeJimm20Rd, raw: u32) -> Format {
    Format::Jimm20Rd(FormatJimm20Rd {
        op,
        raw,
        jimm20: (raw >> 12) & 0xfffff,
        rd: (raw >> 7) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1` format.
pub fn parse_rd_rm_rs1(op: OpcodeRdRmRs1, raw: u32) -> Format {
    Format::RdRmRs1(FormatRdRmRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2` format.
pub fn parse_rd_rm_rs1_rs2(op: OpcodeRdRmRs1Rs2, raw: u32) -> Format {
    Format::RdRmRs1Rs2(FormatRdRmRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRmRs1Rs2Rs3` format.
pub fn parse_rd_rm_rs1_rs2_rs3(op: OpcodeRdRmRs1Rs2Rs3, raw: u32) -> Format {
    Format::RdRmRs1Rs2Rs3(FormatRdRmRs1Rs2Rs3 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rm: (raw >> 12) & 0x7,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
        rs3: (raw >> 27) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1` format.
pub fn parse_rd_rs1(op: OpcodeRdRs1, raw: u32) -> Format {
    Format::RdRs1(FormatRdRs1 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Rs2` format.
pub fn parse_rd_rs1_rs2(op: OpcodeRdRs1Rs2, raw: u32) -> Format {
    Format::RdRs1Rs2(FormatRdRs1Rs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs1Shamt` format.
pub fn parse_rd_rs1_shamt(op: OpcodeRdRs1Shamt, raw: u32) -> Format {
    Format::RdRs1Shamt(FormatRdRs1Shamt {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamt: (raw >> 20) & 0x3f,
    })
}

/// Parse an instruction with the `RdRs1Shamtw` format.
pub fn parse_rd_rs1_shamtw(op: OpcodeRdRs1Shamtw, raw: u32) -> Format {
    Format::RdRs1Shamtw(FormatRdRs1Shamtw {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs1: (raw >> 15) & 0x1f,
        shamtw: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `RdRs2` format.
pub fn parse_rd_rs2(op: OpcodeRdRs2, raw: u32) -> Format {
    Format::RdRs2(FormatRdRs2 {
        op,
        raw,
        rd: (raw >> 7) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1` format.
pub fn parse_rs1(op: OpcodeRs1, raw: u32) -> Format {
    Format::Rs1(FormatRs1 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
    })
}

/// Parse an instruction with the `Rs1Rs2` format.
pub fn parse_rs1_rs2(op: OpcodeRs1Rs2, raw: u32) -> Format {
    Format::Rs1Rs2(FormatRs1Rs2 {
        op,
        raw,
        rs1: (raw >> 15) & 0x1f,
        rs2: (raw >> 20) & 0x1f,
    })
}

/// Decode instruction into string.
pub fn inst_to_string(raw: Format) -> String {
    match raw {
        Format::Unit(x) => x.op.to_string(),
        Format::Luimm5Imm5RdRs1(x) => x.op.to_string(),
        Format::Luimm5RdRs1Rs2(x) => x.op.to_string(),
        Format::AqrlRdRs1(x) => x.op.to_string(),
        Format::AqrlRdRs1Rs2(x) => x.op.to_string(),
        Format::Bimm12hiBimm12loImm5Rs1(x) => x.op.to_string(),
        Format::Bimm12hiBimm12loRs1Rs2(x) => x.op.to_string(),
        Format::FmPredRdRs1Succ(x) => x.op.to_string(),
        Format::Imm12Rd(x) => x.op.to_string(),
        Format::Imm12RdRmRs1(x) => x.op.to_string(),
        Format::Imm12RdRs1(x) => x.op.to_string(),
        Format::Imm12Rs1(x) => x.op.to_string(),
        Format::Imm12Rs1StaggerMaskStaggerMax(x) => x.op.to_string(),
        Format::Imm12hiImm12loRs1Rs2(x) => x.op.to_string(),
        Format::Imm20Rd(x) => x.op.to_string(),
        Format::Imm5Rd(x) => x.op.to_string(),
        Format::Imm5RdRs1(x) => x.op.to_string(),
        Format::Imm6RdRs1(x) => x.op.to_string(),
        Format::Jimm20Rd(x) => x.op.to_string(),
        Format::RdRmRs1(x) => x.op.to_string(),
        Format::RdRmRs1Rs2(x) => x.op.to_string(),
        Format::RdRmRs1Rs2Rs3(x) => x.op.to_string(),
        Format::RdRs1(x) => x.op.to_string(),
        Format::RdRs1Rs2(x) => x.op.to_string(),
        Format::RdRs1Shamt(x) => x.op.to_string(),
        Format::RdRs1Shamtw(x) => x.op.to_string(),
        Format::RdRs2(x) => x.op.to_string(),
        Format::Rs1(x) => x.op.to_string(),
        Format::Rs1Rs2(x) => x.op.to_string(),
        _ => "Unsupported instruction format".to_string(),
    }
}
/// Struct to store the latency of each instruction.
#[derive(Debug, serde::Serialize, serde::Deserialize)]
pub struct Latency {
    // Format::Unit
    ecall: u8,
    ebreak: u8,
    uret: u8,
    sret: u8,
    mret: u8,
    dret: u8,
    wfi: u8,
    c_addi4spn: u8,
    c_fld: u8,
    c_lw: u8,
    c_flw: u8,
    c_fsd: u8,
    c_sw: u8,
    c_fsw: u8,
    c_addi: u8,
    c_jal: u8,
    c_li: u8,
    c_lui: u8,
    c_srli: u8,
    c_srai: u8,
    c_andi: u8,
    c_sub: u8,
    c_xor: u8,
    c_or: u8,
    c_and: u8,
    c_j: u8,
    c_beqz: u8,
    c_bnez: u8,
    c_slli: u8,
    c_fldsp: u8,
    c_lwsp: u8,
    c_flwsp: u8,
    c_mv: u8,
    c_add: u8,
    c_fsdsp: u8,
    c_swsp: u8,
    c_fswsp: u8,
    c_subw: u8,
    c_addw: u8,
    // Format::Luimm5Imm5RdRs1
    p_extract: u8,
    p_extractu: u8,
    p_insert: u8,
    p_bset: u8,
    p_bclr: u8,
    // Format::Luimm5RdRs1Rs2
    p_addn: u8,
    p_addun: u8,
    // Format::AqrlRdRs1
    lr_w: u8,
    lr_d: u8,
    // Format::AqrlRdRs1Rs2
    amoadd_w: u8,
    amoxor_w: u8,
    amoor_w: u8,
    amoand_w: u8,
    amomin_w: u8,
    amomax_w: u8,
    amominu_w: u8,
    amomaxu_w: u8,
    amoswap_w: u8,
    sc_w: u8,
    amoadd_d: u8,
    amoxor_d: u8,
    amoor_d: u8,
    amoand_d: u8,
    amomin_d: u8,
    amomax_d: u8,
    amominu_d: u8,
    amomaxu_d: u8,
    amoswap_d: u8,
    sc_d: u8,
    // Format::Bimm12hiBimm12loImm5Rs1
    p_beqimm: u8,
    p_bneimm: u8,
    // Format::Bimm12hiBimm12loRs1Rs2
    beq: u8,
    bne: u8,
    blt: u8,
    bge: u8,
    bltu: u8,
    bgeu: u8,
    // Format::FmPredRdRs1Succ
    fence: u8,
    // Format::Imm12Rd
    scfgri: u8,
    // Format::Imm12RdRmRs1
    irep: u8,
    // Format::Imm12RdRs1
    jalr: u8,
    addi: u8,
    slti: u8,
    sltiu: u8,
    xori: u8,
    ori: u8,
    andi: u8,
    lb: u8,
    lh: u8,
    lw: u8,
    lbu: u8,
    lhu: u8,
    fence_i: u8,
    addiw: u8,
    ld: u8,
    lwu: u8,
    flw: u8,
    fld: u8,
    flq: u8,
    csrrw: u8,
    csrrs: u8,
    csrrc: u8,
    csrrwi: u8,
    csrrsi: u8,
    csrrci: u8,
    flh: u8,
    flb: u8,
    // Format::Imm12Rs1
    scfgwi: u8,
    // Format::Imm12Rs1StaggerMaskStaggerMax
    frep_o: u8,
    frep_i: u8,
    // Format::Imm12hiImm12loRs1Rs2
    sb: u8,
    sh: u8,
    sw: u8,
    sd: u8,
    fsw: u8,
    fsd: u8,
    fsq: u8,
    fsh: u8,
    fsb: u8,
    // Format::Imm20Rd
    lui: u8,
    auipc: u8,
    // Format::Imm5Rd
    dmstati: u8,
    // Format::Imm5RdRs1
    p_clip: u8,
    p_clipu: u8,
    dmcpyi: u8,
    // Format::Imm6RdRs1
    pv_add_sci_h: u8,
    pv_add_sci_b: u8,
    pv_sub_sci_h: u8,
    pv_sub_sci_b: u8,
    pv_avg_sci_h: u8,
    pv_avg_sci_b: u8,
    pv_avgu_sci_h: u8,
    pv_avgu_sci_b: u8,
    pv_min_sci_h: u8,
    pv_min_sci_b: u8,
    pv_minu_sci_h: u8,
    pv_minu_sci_b: u8,
    pv_max_sci_h: u8,
    pv_max_sci_b: u8,
    pv_maxu_sci_h: u8,
    pv_maxu_sci_b: u8,
    pv_srl_sci_h: u8,
    pv_srl_sci_b: u8,
    pv_sra_sci_h: u8,
    pv_sra_sci_b: u8,
    pv_sll_sci_h: u8,
    pv_sll_sci_b: u8,
    pv_or_sci_h: u8,
    pv_or_sci_b: u8,
    pv_xor_sci_h: u8,
    pv_xor_sci_b: u8,
    pv_and_sci_h: u8,
    pv_and_sci_b: u8,
    pv_extract_h: u8,
    pv_extract_b: u8,
    pv_extractu_h: u8,
    pv_extractu_b: u8,
    pv_insert_h: u8,
    pv_insert_b: u8,
    pv_dotsp_sci_h: u8,
    pv_dotsp_sci_b: u8,
    pv_dotup_sci_h: u8,
    pv_dotup_sci_b: u8,
    pv_dotusp_sci_h: u8,
    pv_dotusp_sci_b: u8,
    pv_sdotsp_sci_h: u8,
    pv_sdotsp_sci_b: u8,
    pv_sdotup_sci_h: u8,
    pv_sdotup_sci_b: u8,
    pv_sdotusp_sci_h: u8,
    pv_sdotusp_sci_b: u8,
    pv_cmpeq_sci_h: u8,
    pv_cmpeq_sci_b: u8,
    pv_cmpne_sci_h: u8,
    pv_cmpne_sci_b: u8,
    pv_cmpgt_sci_h: u8,
    pv_cmpgt_sci_b: u8,
    pv_cmpge_sci_h: u8,
    pv_cmpge_sci_b: u8,
    pv_cmplt_sci_h: u8,
    pv_cmplt_sci_b: u8,
    pv_cmple_sci_h: u8,
    pv_cmple_sci_b: u8,
    pv_cmpgtu_sci_h: u8,
    pv_cmpgtu_sci_b: u8,
    pv_cmpgeu_sci_h: u8,
    pv_cmpgeu_sci_b: u8,
    pv_cmpltu_sci_h: u8,
    pv_cmpltu_sci_b: u8,
    pv_cmpleu_sci_h: u8,
    pv_cmpleu_sci_b: u8,
    pv_shuffle_sci_h: u8,
    pv_shufflei0_sci_b: u8,
    pv_shufflei1_sci_b: u8,
    pv_shufflei2_sci_b: u8,
    pv_shufflei3_sci_b: u8,
    // Format::Jimm20Rd
    jal: u8,
    // Format::RdRmRs1
    fsqrt_s: u8,
    fcvt_w_s: u8,
    fcvt_wu_s: u8,
    fcvt_s_w: u8,
    fcvt_s_wu: u8,
    fcvt_l_s: u8,
    fcvt_lu_s: u8,
    fcvt_s_l: u8,
    fcvt_s_lu: u8,
    fcvt_s_d: u8,
    fcvt_d_s: u8,
    fsqrt_d: u8,
    fcvt_w_d: u8,
    fcvt_wu_d: u8,
    fcvt_d_w: u8,
    fcvt_d_wu: u8,
    fcvt_l_d: u8,
    fcvt_lu_d: u8,
    fcvt_d_l: u8,
    fcvt_d_lu: u8,
    fcvt_s_q: u8,
    fcvt_q_s: u8,
    fcvt_d_q: u8,
    fcvt_q_d: u8,
    fsqrt_q: u8,
    fcvt_w_q: u8,
    fcvt_wu_q: u8,
    fcvt_q_w: u8,
    fcvt_q_wu: u8,
    fcvt_l_q: u8,
    fcvt_lu_q: u8,
    fcvt_q_l: u8,
    fcvt_q_lu: u8,
    fsqrt_h: u8,
    fcvt_w_h: u8,
    fcvt_wu_h: u8,
    fcvt_h_w: u8,
    fcvt_h_wu: u8,
    fcvt_l_h: u8,
    fcvt_lu_h: u8,
    fcvt_h_l: u8,
    fcvt_h_lu: u8,
    fcvt_h_s: u8,
    fcvt_h_d: u8,
    fcvt_h_h: u8,
    fcvt_b_h: u8,
    // Format::RdRmRs1Rs2
    fadd_s: u8,
    fsub_s: u8,
    fmul_s: u8,
    fdiv_s: u8,
    fadd_d: u8,
    fsub_d: u8,
    fmul_d: u8,
    fdiv_d: u8,
    fadd_q: u8,
    fsub_q: u8,
    fmul_q: u8,
    fdiv_q: u8,
    fadd_h: u8,
    fsub_h: u8,
    fmul_h: u8,
    fdiv_h: u8,
    fmulex_s_h: u8,
    fmacex_s_h: u8,
    fmulex_s_b: u8,
    fmacex_s_b: u8,
    // Format::RdRmRs1Rs2Rs3
    fmadd_s: u8,
    fmsub_s: u8,
    fnmsub_s: u8,
    fnmadd_s: u8,
    fmadd_d: u8,
    fmsub_d: u8,
    fnmsub_d: u8,
    fnmadd_d: u8,
    fmadd_q: u8,
    fmsub_q: u8,
    fnmsub_q: u8,
    fnmadd_q: u8,
    fmadd_h: u8,
    fmsub_h: u8,
    fnmsub_h: u8,
    fnmadd_h: u8,
    // Format::RdRs1
    hlv_b: u8,
    hlv_bu: u8,
    hlv_h: u8,
    hlv_hu: u8,
    hlvx_hu: u8,
    hlv_w: u8,
    hlvx_wu: u8,
    hlv_wu: u8,
    hlv_d: u8,
    fmv_x_w: u8,
    fclass_s: u8,
    fmv_w_x: u8,
    fclass_d: u8,
    fmv_x_d: u8,
    fmv_d_x: u8,
    fclass_q: u8,
    p_abs: u8,
    p_exths: u8,
    p_exthz: u8,
    p_extbs: u8,
    p_extbz: u8,
    p_clb: u8,
    p_fl1: u8,
    p_ff1: u8,
    p_ror: u8,
    pv_abs_h: u8,
    pv_abs_b: u8,
    fmv_x_h: u8,
    fclass_h: u8,
    fmv_h_x: u8,
    fcvt_s_h: u8,
    fcvt_d_h: u8,
    fcvt_h_b: u8,
    fcvt_b_b: u8,
    vfsqrt_s: u8,
    vfclass_s: u8,
    vfmv_x_s: u8,
    vfmv_s_x: u8,
    vfcvt_x_s: u8,
    vfcvt_xu_s: u8,
    vfcvt_s_x: u8,
    vfcvt_s_xu: u8,
    vfcvt_h_h: u8,
    vfcvtu_h_h: u8,
    vfsqrt_h: u8,
    vfclass_h: u8,
    vfmv_x_h: u8,
    vfmv_h_x: u8,
    vfcvt_x_h: u8,
    vfcvt_xu_h: u8,
    vfcvt_h_x: u8,
    vfcvt_h_xu: u8,
    vfcvt_s_h: u8,
    vfcvtu_s_h: u8,
    vfcvt_h_s: u8,
    vfcvtu_h_s: u8,
    vfsqrt_b: u8,
    vfmv_x_b: u8,
    vfmv_b_x: u8,
    vfclass_b: u8,
    vfcvt_x_b: u8,
    vfcvt_xu_b: u8,
    vfcvt_b_x: u8,
    vfcvt_b_xu: u8,
    vfcvt_s_b: u8,
    vfcvtu_s_b: u8,
    vfcvt_b_s: u8,
    vfcvtu_b_s: u8,
    vfcvt_h_b: u8,
    vfcvtu_h_b: u8,
    vfcvt_b_h: u8,
    vfcvtu_b_h: u8,
    vfcvt_b_b: u8,
    vfcvtu_b_b: u8,
    vfsum_s: u8,
    vfnsum_s: u8,
    vfsum_h: u8,
    vfnsum_h: u8,
    vfsum_b: u8,
    vfnsum_b: u8,
    vfsumex_s_h: u8,
    vfnsumex_s_h: u8,
    vfsumex_h_b: u8,
    vfnsumex_h_b: u8,
    // Format::RdRs1Rs2
    add: u8,
    sub: u8,
    sll: u8,
    slt: u8,
    sltu: u8,
    xor: u8,
    srl: u8,
    sra: u8,
    or: u8,
    and: u8,
    addw: u8,
    subw: u8,
    sllw: u8,
    srlw: u8,
    sraw: u8,
    mul: u8,
    mulh: u8,
    mulhsu: u8,
    mulhu: u8,
    div: u8,
    divu: u8,
    rem: u8,
    remu: u8,
    mulw: u8,
    divw: u8,
    divuw: u8,
    remw: u8,
    remuw: u8,
    fsgnj_s: u8,
    fsgnjn_s: u8,
    fsgnjx_s: u8,
    fmin_s: u8,
    fmax_s: u8,
    fle_s: u8,
    flt_s: u8,
    feq_s: u8,
    fsgnj_d: u8,
    fsgnjn_d: u8,
    fsgnjx_d: u8,
    fmin_d: u8,
    fmax_d: u8,
    fle_d: u8,
    flt_d: u8,
    feq_d: u8,
    fsgnj_q: u8,
    fsgnjn_q: u8,
    fsgnjx_q: u8,
    fmin_q: u8,
    fmax_q: u8,
    fle_q: u8,
    flt_q: u8,
    feq_q: u8,
    p_extractr: u8,
    p_extractur: u8,
    p_insertr: u8,
    p_bsetr: u8,
    p_bclrr: u8,
    p_cnt: u8,
    p_clipr: u8,
    p_clipur: u8,
    p_mac: u8,
    p_msu: u8,
    p_min: u8,
    p_minu: u8,
    p_max: u8,
    p_maxu: u8,
    p_slet: u8,
    p_sletu: u8,
    pv_add_h: u8,
    pv_add_sc_h: u8,
    pv_add_b: u8,
    pv_add_sc_b: u8,
    pv_sub_h: u8,
    pv_sub_sc_h: u8,
    pv_sub_b: u8,
    pv_sub_sc_b: u8,
    pv_avg_h: u8,
    pv_avg_sc_h: u8,
    pv_avg_b: u8,
    pv_avg_sc_b: u8,
    pv_avgu_h: u8,
    pv_avgu_sc_h: u8,
    pv_avgu_b: u8,
    pv_avgu_sc_b: u8,
    pv_min_h: u8,
    pv_min_sc_h: u8,
    pv_min_b: u8,
    pv_min_sc_b: u8,
    pv_minu_h: u8,
    pv_minu_sc_h: u8,
    pv_minu_b: u8,
    pv_minu_sc_b: u8,
    pv_max_h: u8,
    pv_max_sc_h: u8,
    pv_max_b: u8,
    pv_max_sc_b: u8,
    pv_maxu_h: u8,
    pv_maxu_sc_h: u8,
    pv_maxu_b: u8,
    pv_maxu_sc_b: u8,
    pv_srl_h: u8,
    pv_srl_sc_h: u8,
    pv_srl_b: u8,
    pv_srl_sc_b: u8,
    pv_sra_h: u8,
    pv_sra_sc_h: u8,
    pv_sra_b: u8,
    pv_sra_sc_b: u8,
    pv_sll_h: u8,
    pv_sll_sc_h: u8,
    pv_sll_b: u8,
    pv_sll_sc_b: u8,
    pv_or_h: u8,
    pv_or_sc_h: u8,
    pv_or_b: u8,
    pv_or_sc_b: u8,
    pv_xor_h: u8,
    pv_xor_sc_h: u8,
    pv_xor_b: u8,
    pv_xor_sc_b: u8,
    pv_and_h: u8,
    pv_and_sc_h: u8,
    pv_and_b: u8,
    pv_and_sc_b: u8,
    pv_dotsp_h: u8,
    pv_dotsp_sc_h: u8,
    pv_dotsp_b: u8,
    pv_dotsp_sc_b: u8,
    pv_dotup_h: u8,
    pv_dotup_sc_h: u8,
    pv_dotup_b: u8,
    pv_dotup_sc_b: u8,
    pv_dotusp_h: u8,
    pv_dotusp_sc_h: u8,
    pv_dotusp_b: u8,
    pv_dotusp_sc_b: u8,
    pv_sdotsp_h: u8,
    pv_sdotsp_sc_h: u8,
    pv_sdotsp_b: u8,
    pv_sdotsp_sc_b: u8,
    pv_sdotup_h: u8,
    pv_sdotup_sc_h: u8,
    pv_sdotup_b: u8,
    pv_sdotup_sc_b: u8,
    pv_sdotusp_h: u8,
    pv_sdotusp_sc_h: u8,
    pv_sdotusp_b: u8,
    pv_sdotusp_sc_b: u8,
    pv_cmpeq_h: u8,
    pv_cmpeq_sc_h: u8,
    pv_cmpeq_b: u8,
    pv_cmpeq_sc_b: u8,
    pv_cmpne_h: u8,
    pv_cmpne_sc_h: u8,
    pv_cmpne_b: u8,
    pv_cmpne_sc_b: u8,
    pv_cmpgt_h: u8,
    pv_cmpgt_sc_h: u8,
    pv_cmpgt_b: u8,
    pv_cmpgt_sc_b: u8,
    pv_cmpge_h: u8,
    pv_cmpge_sc_h: u8,
    pv_cmpge_b: u8,
    pv_cmpge_sc_b: u8,
    pv_cmplt_h: u8,
    pv_cmplt_sc_h: u8,
    pv_cmplt_b: u8,
    pv_cmplt_sc_b: u8,
    pv_cmple_h: u8,
    pv_cmple_sc_h: u8,
    pv_cmple_b: u8,
    pv_cmple_sc_b: u8,
    pv_cmpgtu_h: u8,
    pv_cmpgtu_sc_h: u8,
    pv_cmpgtu_b: u8,
    pv_cmpgtu_sc_b: u8,
    pv_cmpgeu_h: u8,
    pv_cmpgeu_sc_h: u8,
    pv_cmpgeu_b: u8,
    pv_cmpgeu_sc_b: u8,
    pv_cmpltu_h: u8,
    pv_cmpltu_sc_h: u8,
    pv_cmpltu_b: u8,
    pv_cmpltu_sc_b: u8,
    pv_cmpleu_h: u8,
    pv_cmpleu_sc_h: u8,
    pv_cmpleu_b: u8,
    pv_cmpleu_sc_b: u8,
    pv_add_h_div2: u8,
    pv_add_h_div4: u8,
    pv_add_h_div8: u8,
    pv_sub_h_div2: u8,
    pv_sub_h_div4: u8,
    pv_sub_h_div8: u8,
    pv_shuffle_h: u8,
    pv_shuffle_b: u8,
    pv_shuffle2_h: u8,
    pv_shuffle2_b: u8,
    pv_pack: u8,
    pv_pack_h: u8,
    pv_packhi_b: u8,
    pv_packlo_b: u8,
    dmcpy: u8,
    fsgnj_h: u8,
    fsgnjn_h: u8,
    fsgnjx_h: u8,
    fmin_h: u8,
    fmax_h: u8,
    feq_h: u8,
    flt_h: u8,
    fle_h: u8,
    vfadd_s: u8,
    vfadd_r_s: u8,
    vfsub_s: u8,
    vfsub_r_s: u8,
    vfmul_s: u8,
    vfmul_r_s: u8,
    vfdiv_s: u8,
    vfdiv_r_s: u8,
    vfmin_s: u8,
    vfmin_r_s: u8,
    vfmax_s: u8,
    vfmax_r_s: u8,
    vfmac_s: u8,
    vfmac_r_s: u8,
    vfmre_s: u8,
    vfmre_r_s: u8,
    vfsgnj_s: u8,
    vfsgnj_r_s: u8,
    vfsgnjn_s: u8,
    vfsgnjn_r_s: u8,
    vfsgnjx_s: u8,
    vfsgnjx_r_s: u8,
    vfeq_s: u8,
    vfeq_r_s: u8,
    vfne_s: u8,
    vfne_r_s: u8,
    vflt_s: u8,
    vflt_r_s: u8,
    vfge_s: u8,
    vfge_r_s: u8,
    vfle_s: u8,
    vfle_r_s: u8,
    vfgt_s: u8,
    vfgt_r_s: u8,
    vfcpka_s_s: u8,
    vfcpkb_s_s: u8,
    vfcpkc_s_s: u8,
    vfcpkd_s_s: u8,
    vfcpka_s_d: u8,
    vfcpkb_s_d: u8,
    vfcpkc_s_d: u8,
    vfcpkd_s_d: u8,
    vfadd_h: u8,
    vfadd_r_h: u8,
    vfsub_h: u8,
    vfsub_r_h: u8,
    vfmul_h: u8,
    vfmul_r_h: u8,
    vfdiv_h: u8,
    vfdiv_r_h: u8,
    vfmin_h: u8,
    vfmin_r_h: u8,
    vfmax_h: u8,
    vfmax_r_h: u8,
    vfmac_h: u8,
    vfmac_r_h: u8,
    vfmre_h: u8,
    vfmre_r_h: u8,
    vfsgnj_h: u8,
    vfsgnj_r_h: u8,
    vfsgnjn_h: u8,
    vfsgnjn_r_h: u8,
    vfsgnjx_h: u8,
    vfsgnjx_r_h: u8,
    vfeq_h: u8,
    vfeq_r_h: u8,
    vfne_h: u8,
    vfne_r_h: u8,
    vflt_h: u8,
    vflt_r_h: u8,
    vfge_h: u8,
    vfge_r_h: u8,
    vfle_h: u8,
    vfle_r_h: u8,
    vfgt_h: u8,
    vfgt_r_h: u8,
    vfcpka_h_s: u8,
    vfcpkb_h_s: u8,
    vfcpkc_h_s: u8,
    vfcpkd_h_s: u8,
    vfcpka_h_d: u8,
    vfcpkb_h_d: u8,
    vfcpkc_h_d: u8,
    vfcpkd_h_d: u8,
    vfadd_b: u8,
    vfadd_r_b: u8,
    vfsub_b: u8,
    vfsub_r_b: u8,
    vfmul_b: u8,
    vfmul_r_b: u8,
    vfdiv_b: u8,
    vfdiv_r_b: u8,
    vfmin_b: u8,
    vfmin_r_b: u8,
    vfmax_b: u8,
    vfmax_r_b: u8,
    vfmac_b: u8,
    vfmac_r_b: u8,
    vfmre_b: u8,
    vfmre_r_b: u8,
    vfsgnj_b: u8,
    vfsgnj_r_b: u8,
    vfsgnjn_b: u8,
    vfsgnjn_r_b: u8,
    vfsgnjx_b: u8,
    vfsgnjx_r_b: u8,
    vfeq_b: u8,
    vfeq_r_b: u8,
    vfne_b: u8,
    vfne_r_b: u8,
    vflt_b: u8,
    vflt_r_b: u8,
    vfge_b: u8,
    vfge_r_b: u8,
    vfle_b: u8,
    vfle_r_b: u8,
    vfgt_b: u8,
    vfgt_r_b: u8,
    vfcpka_b_s: u8,
    vfcpkb_b_s: u8,
    vfcpkc_b_s: u8,
    vfcpkd_b_s: u8,
    vfcpka_b_d: u8,
    vfcpkb_b_d: u8,
    vfcpkc_b_d: u8,
    vfcpkd_b_d: u8,
    vfdotpex_s_h: u8,
    vfdotpex_s_r_h: u8,
    vfndotpex_s_h: u8,
    vfndotpex_s_r_h: u8,
    vfdotpex_h_b: u8,
    vfdotpex_h_r_b: u8,
    vfndotpex_h_b: u8,
    vfndotpex_h_r_b: u8,
    // Format::RdRs1Shamt
    slli: u8,
    srli: u8,
    srai: u8,
    // Format::RdRs1Shamtw
    slliw: u8,
    srliw: u8,
    sraiw: u8,
    // Format::RdRs2
    dmstat: u8,
    scfgr: u8,
    // Format::Rs1
    dmrep: u8,
    // Format::Rs1Rs2
    hfence_vvma: u8,
    hfence_gvma: u8,
    hsv_b: u8,
    hsv_h: u8,
    hsv_w: u8,
    hsv_d: u8,
    sfence_vma: u8,
    dmsrc: u8,
    dmdst: u8,
    dmstr: u8,
    scfgw: u8,
}

/// Struct to store the latency of each instruction.
impl Default for Latency {
    fn default() -> Latency {
        Latency {
            ecall: 1,
            ebreak: 1,
            uret: 1,
            sret: 1,
            mret: 1,
            dret: 1,
            wfi: 1,
            c_addi4spn: 1,
            c_fld: 1,
            c_lw: 1,
            c_flw: 1,
            c_fsd: 1,
            c_sw: 1,
            c_fsw: 1,
            c_addi: 1,
            c_jal: 1,
            c_li: 1,
            c_lui: 1,
            c_srli: 1,
            c_srai: 1,
            c_andi: 1,
            c_sub: 1,
            c_xor: 1,
            c_or: 1,
            c_and: 1,
            c_j: 1,
            c_beqz: 1,
            c_bnez: 1,
            c_slli: 1,
            c_fldsp: 1,
            c_lwsp: 1,
            c_flwsp: 1,
            c_mv: 1,
            c_add: 1,
            c_fsdsp: 1,
            c_swsp: 1,
            c_fswsp: 1,
            c_subw: 1,
            c_addw: 1,
            p_extract: 1,
            p_extractu: 1,
            p_insert: 1,
            p_bset: 1,
            p_bclr: 1,
            p_addn: 1,
            p_addun: 1,
            lr_w: 1,
            lr_d: 1,
            amoadd_w: 1,
            amoxor_w: 1,
            amoor_w: 1,
            amoand_w: 1,
            amomin_w: 1,
            amomax_w: 1,
            amominu_w: 1,
            amomaxu_w: 1,
            amoswap_w: 1,
            sc_w: 1,
            amoadd_d: 1,
            amoxor_d: 1,
            amoor_d: 1,
            amoand_d: 1,
            amomin_d: 1,
            amomax_d: 1,
            amominu_d: 1,
            amomaxu_d: 1,
            amoswap_d: 1,
            sc_d: 1,
            p_beqimm: 1,
            p_bneimm: 1,
            beq: 1,
            bne: 1,
            blt: 1,
            bge: 1,
            bltu: 1,
            bgeu: 1,
            fence: 1,
            scfgri: 1,
            irep: 1,
            jalr: 1,
            addi: 1,
            slti: 1,
            sltiu: 1,
            xori: 1,
            ori: 1,
            andi: 1,
            lb: 1,
            lh: 1,
            lw: 1,
            lbu: 1,
            lhu: 1,
            fence_i: 1,
            addiw: 1,
            ld: 1,
            lwu: 1,
            flw: 1,
            fld: 1,
            flq: 1,
            csrrw: 1,
            csrrs: 1,
            csrrc: 1,
            csrrwi: 1,
            csrrsi: 1,
            csrrci: 1,
            flh: 1,
            flb: 1,
            scfgwi: 1,
            frep_o: 1,
            frep_i: 1,
            sb: 1,
            sh: 1,
            sw: 1,
            sd: 1,
            fsw: 1,
            fsd: 1,
            fsq: 1,
            fsh: 1,
            fsb: 1,
            lui: 1,
            auipc: 1,
            dmstati: 1,
            p_clip: 1,
            p_clipu: 1,
            dmcpyi: 1,
            pv_add_sci_h: 1,
            pv_add_sci_b: 1,
            pv_sub_sci_h: 1,
            pv_sub_sci_b: 1,
            pv_avg_sci_h: 1,
            pv_avg_sci_b: 1,
            pv_avgu_sci_h: 1,
            pv_avgu_sci_b: 1,
            pv_min_sci_h: 1,
            pv_min_sci_b: 1,
            pv_minu_sci_h: 1,
            pv_minu_sci_b: 1,
            pv_max_sci_h: 1,
            pv_max_sci_b: 1,
            pv_maxu_sci_h: 1,
            pv_maxu_sci_b: 1,
            pv_srl_sci_h: 1,
            pv_srl_sci_b: 1,
            pv_sra_sci_h: 1,
            pv_sra_sci_b: 1,
            pv_sll_sci_h: 1,
            pv_sll_sci_b: 1,
            pv_or_sci_h: 1,
            pv_or_sci_b: 1,
            pv_xor_sci_h: 1,
            pv_xor_sci_b: 1,
            pv_and_sci_h: 1,
            pv_and_sci_b: 1,
            pv_extract_h: 1,
            pv_extract_b: 1,
            pv_extractu_h: 1,
            pv_extractu_b: 1,
            pv_insert_h: 1,
            pv_insert_b: 1,
            pv_dotsp_sci_h: 1,
            pv_dotsp_sci_b: 1,
            pv_dotup_sci_h: 1,
            pv_dotup_sci_b: 1,
            pv_dotusp_sci_h: 1,
            pv_dotusp_sci_b: 1,
            pv_sdotsp_sci_h: 1,
            pv_sdotsp_sci_b: 1,
            pv_sdotup_sci_h: 1,
            pv_sdotup_sci_b: 1,
            pv_sdotusp_sci_h: 1,
            pv_sdotusp_sci_b: 1,
            pv_cmpeq_sci_h: 1,
            pv_cmpeq_sci_b: 1,
            pv_cmpne_sci_h: 1,
            pv_cmpne_sci_b: 1,
            pv_cmpgt_sci_h: 1,
            pv_cmpgt_sci_b: 1,
            pv_cmpge_sci_h: 1,
            pv_cmpge_sci_b: 1,
            pv_cmplt_sci_h: 1,
            pv_cmplt_sci_b: 1,
            pv_cmple_sci_h: 1,
            pv_cmple_sci_b: 1,
            pv_cmpgtu_sci_h: 1,
            pv_cmpgtu_sci_b: 1,
            pv_cmpgeu_sci_h: 1,
            pv_cmpgeu_sci_b: 1,
            pv_cmpltu_sci_h: 1,
            pv_cmpltu_sci_b: 1,
            pv_cmpleu_sci_h: 1,
            pv_cmpleu_sci_b: 1,
            pv_shuffle_sci_h: 1,
            pv_shufflei0_sci_b: 1,
            pv_shufflei1_sci_b: 1,
            pv_shufflei2_sci_b: 1,
            pv_shufflei3_sci_b: 1,
            jal: 1,
            fsqrt_s: 1,
            fcvt_w_s: 1,
            fcvt_wu_s: 1,
            fcvt_s_w: 1,
            fcvt_s_wu: 1,
            fcvt_l_s: 1,
            fcvt_lu_s: 1,
            fcvt_s_l: 1,
            fcvt_s_lu: 1,
            fcvt_s_d: 1,
            fcvt_d_s: 1,
            fsqrt_d: 1,
            fcvt_w_d: 1,
            fcvt_wu_d: 1,
            fcvt_d_w: 1,
            fcvt_d_wu: 1,
            fcvt_l_d: 1,
            fcvt_lu_d: 1,
            fcvt_d_l: 1,
            fcvt_d_lu: 1,
            fcvt_s_q: 1,
            fcvt_q_s: 1,
            fcvt_d_q: 1,
            fcvt_q_d: 1,
            fsqrt_q: 1,
            fcvt_w_q: 1,
            fcvt_wu_q: 1,
            fcvt_q_w: 1,
            fcvt_q_wu: 1,
            fcvt_l_q: 1,
            fcvt_lu_q: 1,
            fcvt_q_l: 1,
            fcvt_q_lu: 1,
            fsqrt_h: 1,
            fcvt_w_h: 1,
            fcvt_wu_h: 1,
            fcvt_h_w: 1,
            fcvt_h_wu: 1,
            fcvt_l_h: 1,
            fcvt_lu_h: 1,
            fcvt_h_l: 1,
            fcvt_h_lu: 1,
            fcvt_h_s: 1,
            fcvt_h_d: 1,
            fcvt_h_h: 1,
            fcvt_b_h: 1,
            fadd_s: 1,
            fsub_s: 1,
            fmul_s: 1,
            fdiv_s: 1,
            fadd_d: 1,
            fsub_d: 1,
            fmul_d: 1,
            fdiv_d: 1,
            fadd_q: 1,
            fsub_q: 1,
            fmul_q: 1,
            fdiv_q: 1,
            fadd_h: 1,
            fsub_h: 1,
            fmul_h: 1,
            fdiv_h: 1,
            fmulex_s_h: 1,
            fmacex_s_h: 1,
            fmulex_s_b: 1,
            fmacex_s_b: 1,
            fmadd_s: 1,
            fmsub_s: 1,
            fnmsub_s: 1,
            fnmadd_s: 1,
            fmadd_d: 1,
            fmsub_d: 1,
            fnmsub_d: 1,
            fnmadd_d: 1,
            fmadd_q: 1,
            fmsub_q: 1,
            fnmsub_q: 1,
            fnmadd_q: 1,
            fmadd_h: 1,
            fmsub_h: 1,
            fnmsub_h: 1,
            fnmadd_h: 1,
            hlv_b: 1,
            hlv_bu: 1,
            hlv_h: 1,
            hlv_hu: 1,
            hlvx_hu: 1,
            hlv_w: 1,
            hlvx_wu: 1,
            hlv_wu: 1,
            hlv_d: 1,
            fmv_x_w: 1,
            fclass_s: 1,
            fmv_w_x: 1,
            fclass_d: 1,
            fmv_x_d: 1,
            fmv_d_x: 1,
            fclass_q: 1,
            p_abs: 1,
            p_exths: 1,
            p_exthz: 1,
            p_extbs: 1,
            p_extbz: 1,
            p_clb: 1,
            p_fl1: 1,
            p_ff1: 1,
            p_ror: 1,
            pv_abs_h: 1,
            pv_abs_b: 1,
            fmv_x_h: 1,
            fclass_h: 1,
            fmv_h_x: 1,
            fcvt_s_h: 1,
            fcvt_d_h: 1,
            fcvt_h_b: 1,
            fcvt_b_b: 1,
            vfsqrt_s: 1,
            vfclass_s: 1,
            vfmv_x_s: 1,
            vfmv_s_x: 1,
            vfcvt_x_s: 1,
            vfcvt_xu_s: 1,
            vfcvt_s_x: 1,
            vfcvt_s_xu: 1,
            vfcvt_h_h: 1,
            vfcvtu_h_h: 1,
            vfsqrt_h: 1,
            vfclass_h: 1,
            vfmv_x_h: 1,
            vfmv_h_x: 1,
            vfcvt_x_h: 1,
            vfcvt_xu_h: 1,
            vfcvt_h_x: 1,
            vfcvt_h_xu: 1,
            vfcvt_s_h: 1,
            vfcvtu_s_h: 1,
            vfcvt_h_s: 1,
            vfcvtu_h_s: 1,
            vfsqrt_b: 1,
            vfmv_x_b: 1,
            vfmv_b_x: 1,
            vfclass_b: 1,
            vfcvt_x_b: 1,
            vfcvt_xu_b: 1,
            vfcvt_b_x: 1,
            vfcvt_b_xu: 1,
            vfcvt_s_b: 1,
            vfcvtu_s_b: 1,
            vfcvt_b_s: 1,
            vfcvtu_b_s: 1,
            vfcvt_h_b: 1,
            vfcvtu_h_b: 1,
            vfcvt_b_h: 1,
            vfcvtu_b_h: 1,
            vfcvt_b_b: 1,
            vfcvtu_b_b: 1,
            vfsum_s: 1,
            vfnsum_s: 1,
            vfsum_h: 1,
            vfnsum_h: 1,
            vfsum_b: 1,
            vfnsum_b: 1,
            vfsumex_s_h: 1,
            vfnsumex_s_h: 1,
            vfsumex_h_b: 1,
            vfnsumex_h_b: 1,
            add: 1,
            sub: 1,
            sll: 1,
            slt: 1,
            sltu: 1,
            xor: 1,
            srl: 1,
            sra: 1,
            or: 1,
            and: 1,
            addw: 1,
            subw: 1,
            sllw: 1,
            srlw: 1,
            sraw: 1,
            mul: 1,
            mulh: 1,
            mulhsu: 1,
            mulhu: 1,
            div: 1,
            divu: 1,
            rem: 1,
            remu: 1,
            mulw: 1,
            divw: 1,
            divuw: 1,
            remw: 1,
            remuw: 1,
            fsgnj_s: 1,
            fsgnjn_s: 1,
            fsgnjx_s: 1,
            fmin_s: 1,
            fmax_s: 1,
            fle_s: 1,
            flt_s: 1,
            feq_s: 1,
            fsgnj_d: 1,
            fsgnjn_d: 1,
            fsgnjx_d: 1,
            fmin_d: 1,
            fmax_d: 1,
            fle_d: 1,
            flt_d: 1,
            feq_d: 1,
            fsgnj_q: 1,
            fsgnjn_q: 1,
            fsgnjx_q: 1,
            fmin_q: 1,
            fmax_q: 1,
            fle_q: 1,
            flt_q: 1,
            feq_q: 1,
            p_extractr: 1,
            p_extractur: 1,
            p_insertr: 1,
            p_bsetr: 1,
            p_bclrr: 1,
            p_cnt: 1,
            p_clipr: 1,
            p_clipur: 1,
            p_mac: 1,
            p_msu: 1,
            p_min: 1,
            p_minu: 1,
            p_max: 1,
            p_maxu: 1,
            p_slet: 1,
            p_sletu: 1,
            pv_add_h: 1,
            pv_add_sc_h: 1,
            pv_add_b: 1,
            pv_add_sc_b: 1,
            pv_sub_h: 1,
            pv_sub_sc_h: 1,
            pv_sub_b: 1,
            pv_sub_sc_b: 1,
            pv_avg_h: 1,
            pv_avg_sc_h: 1,
            pv_avg_b: 1,
            pv_avg_sc_b: 1,
            pv_avgu_h: 1,
            pv_avgu_sc_h: 1,
            pv_avgu_b: 1,
            pv_avgu_sc_b: 1,
            pv_min_h: 1,
            pv_min_sc_h: 1,
            pv_min_b: 1,
            pv_min_sc_b: 1,
            pv_minu_h: 1,
            pv_minu_sc_h: 1,
            pv_minu_b: 1,
            pv_minu_sc_b: 1,
            pv_max_h: 1,
            pv_max_sc_h: 1,
            pv_max_b: 1,
            pv_max_sc_b: 1,
            pv_maxu_h: 1,
            pv_maxu_sc_h: 1,
            pv_maxu_b: 1,
            pv_maxu_sc_b: 1,
            pv_srl_h: 1,
            pv_srl_sc_h: 1,
            pv_srl_b: 1,
            pv_srl_sc_b: 1,
            pv_sra_h: 1,
            pv_sra_sc_h: 1,
            pv_sra_b: 1,
            pv_sra_sc_b: 1,
            pv_sll_h: 1,
            pv_sll_sc_h: 1,
            pv_sll_b: 1,
            pv_sll_sc_b: 1,
            pv_or_h: 1,
            pv_or_sc_h: 1,
            pv_or_b: 1,
            pv_or_sc_b: 1,
            pv_xor_h: 1,
            pv_xor_sc_h: 1,
            pv_xor_b: 1,
            pv_xor_sc_b: 1,
            pv_and_h: 1,
            pv_and_sc_h: 1,
            pv_and_b: 1,
            pv_and_sc_b: 1,
            pv_dotsp_h: 1,
            pv_dotsp_sc_h: 1,
            pv_dotsp_b: 1,
            pv_dotsp_sc_b: 1,
            pv_dotup_h: 1,
            pv_dotup_sc_h: 1,
            pv_dotup_b: 1,
            pv_dotup_sc_b: 1,
            pv_dotusp_h: 1,
            pv_dotusp_sc_h: 1,
            pv_dotusp_b: 1,
            pv_dotusp_sc_b: 1,
            pv_sdotsp_h: 1,
            pv_sdotsp_sc_h: 1,
            pv_sdotsp_b: 1,
            pv_sdotsp_sc_b: 1,
            pv_sdotup_h: 1,
            pv_sdotup_sc_h: 1,
            pv_sdotup_b: 1,
            pv_sdotup_sc_b: 1,
            pv_sdotusp_h: 1,
            pv_sdotusp_sc_h: 1,
            pv_sdotusp_b: 1,
            pv_sdotusp_sc_b: 1,
            pv_cmpeq_h: 1,
            pv_cmpeq_sc_h: 1,
            pv_cmpeq_b: 1,
            pv_cmpeq_sc_b: 1,
            pv_cmpne_h: 1,
            pv_cmpne_sc_h: 1,
            pv_cmpne_b: 1,
            pv_cmpne_sc_b: 1,
            pv_cmpgt_h: 1,
            pv_cmpgt_sc_h: 1,
            pv_cmpgt_b: 1,
            pv_cmpgt_sc_b: 1,
            pv_cmpge_h: 1,
            pv_cmpge_sc_h: 1,
            pv_cmpge_b: 1,
            pv_cmpge_sc_b: 1,
            pv_cmplt_h: 1,
            pv_cmplt_sc_h: 1,
            pv_cmplt_b: 1,
            pv_cmplt_sc_b: 1,
            pv_cmple_h: 1,
            pv_cmple_sc_h: 1,
            pv_cmple_b: 1,
            pv_cmple_sc_b: 1,
            pv_cmpgtu_h: 1,
            pv_cmpgtu_sc_h: 1,
            pv_cmpgtu_b: 1,
            pv_cmpgtu_sc_b: 1,
            pv_cmpgeu_h: 1,
            pv_cmpgeu_sc_h: 1,
            pv_cmpgeu_b: 1,
            pv_cmpgeu_sc_b: 1,
            pv_cmpltu_h: 1,
            pv_cmpltu_sc_h: 1,
            pv_cmpltu_b: 1,
            pv_cmpltu_sc_b: 1,
            pv_cmpleu_h: 1,
            pv_cmpleu_sc_h: 1,
            pv_cmpleu_b: 1,
            pv_cmpleu_sc_b: 1,
            pv_add_h_div2: 1,
            pv_add_h_div4: 1,
            pv_add_h_div8: 1,
            pv_sub_h_div2: 1,
            pv_sub_h_div4: 1,
            pv_sub_h_div8: 1,
            pv_shuffle_h: 1,
            pv_shuffle_b: 1,
            pv_shuffle2_h: 1,
            pv_shuffle2_b: 1,
            pv_pack: 1,
            pv_pack_h: 1,
            pv_packhi_b: 1,
            pv_packlo_b: 1,
            dmcpy: 1,
            fsgnj_h: 1,
            fsgnjn_h: 1,
            fsgnjx_h: 1,
            fmin_h: 1,
            fmax_h: 1,
            feq_h: 1,
            flt_h: 1,
            fle_h: 1,
            vfadd_s: 1,
            vfadd_r_s: 1,
            vfsub_s: 1,
            vfsub_r_s: 1,
            vfmul_s: 1,
            vfmul_r_s: 1,
            vfdiv_s: 1,
            vfdiv_r_s: 1,
            vfmin_s: 1,
            vfmin_r_s: 1,
            vfmax_s: 1,
            vfmax_r_s: 1,
            vfmac_s: 1,
            vfmac_r_s: 1,
            vfmre_s: 1,
            vfmre_r_s: 1,
            vfsgnj_s: 1,
            vfsgnj_r_s: 1,
            vfsgnjn_s: 1,
            vfsgnjn_r_s: 1,
            vfsgnjx_s: 1,
            vfsgnjx_r_s: 1,
            vfeq_s: 1,
            vfeq_r_s: 1,
            vfne_s: 1,
            vfne_r_s: 1,
            vflt_s: 1,
            vflt_r_s: 1,
            vfge_s: 1,
            vfge_r_s: 1,
            vfle_s: 1,
            vfle_r_s: 1,
            vfgt_s: 1,
            vfgt_r_s: 1,
            vfcpka_s_s: 1,
            vfcpkb_s_s: 1,
            vfcpkc_s_s: 1,
            vfcpkd_s_s: 1,
            vfcpka_s_d: 1,
            vfcpkb_s_d: 1,
            vfcpkc_s_d: 1,
            vfcpkd_s_d: 1,
            vfadd_h: 1,
            vfadd_r_h: 1,
            vfsub_h: 1,
            vfsub_r_h: 1,
            vfmul_h: 1,
            vfmul_r_h: 1,
            vfdiv_h: 1,
            vfdiv_r_h: 1,
            vfmin_h: 1,
            vfmin_r_h: 1,
            vfmax_h: 1,
            vfmax_r_h: 1,
            vfmac_h: 1,
            vfmac_r_h: 1,
            vfmre_h: 1,
            vfmre_r_h: 1,
            vfsgnj_h: 1,
            vfsgnj_r_h: 1,
            vfsgnjn_h: 1,
            vfsgnjn_r_h: 1,
            vfsgnjx_h: 1,
            vfsgnjx_r_h: 1,
            vfeq_h: 1,
            vfeq_r_h: 1,
            vfne_h: 1,
            vfne_r_h: 1,
            vflt_h: 1,
            vflt_r_h: 1,
            vfge_h: 1,
            vfge_r_h: 1,
            vfle_h: 1,
            vfle_r_h: 1,
            vfgt_h: 1,
            vfgt_r_h: 1,
            vfcpka_h_s: 1,
            vfcpkb_h_s: 1,
            vfcpkc_h_s: 1,
            vfcpkd_h_s: 1,
            vfcpka_h_d: 1,
            vfcpkb_h_d: 1,
            vfcpkc_h_d: 1,
            vfcpkd_h_d: 1,
            vfadd_b: 1,
            vfadd_r_b: 1,
            vfsub_b: 1,
            vfsub_r_b: 1,
            vfmul_b: 1,
            vfmul_r_b: 1,
            vfdiv_b: 1,
            vfdiv_r_b: 1,
            vfmin_b: 1,
            vfmin_r_b: 1,
            vfmax_b: 1,
            vfmax_r_b: 1,
            vfmac_b: 1,
            vfmac_r_b: 1,
            vfmre_b: 1,
            vfmre_r_b: 1,
            vfsgnj_b: 1,
            vfsgnj_r_b: 1,
            vfsgnjn_b: 1,
            vfsgnjn_r_b: 1,
            vfsgnjx_b: 1,
            vfsgnjx_r_b: 1,
            vfeq_b: 1,
            vfeq_r_b: 1,
            vfne_b: 1,
            vfne_r_b: 1,
            vflt_b: 1,
            vflt_r_b: 1,
            vfge_b: 1,
            vfge_r_b: 1,
            vfle_b: 1,
            vfle_r_b: 1,
            vfgt_b: 1,
            vfgt_r_b: 1,
            vfcpka_b_s: 1,
            vfcpkb_b_s: 1,
            vfcpkc_b_s: 1,
            vfcpkd_b_s: 1,
            vfcpka_b_d: 1,
            vfcpkb_b_d: 1,
            vfcpkc_b_d: 1,
            vfcpkd_b_d: 1,
            vfdotpex_s_h: 1,
            vfdotpex_s_r_h: 1,
            vfndotpex_s_h: 1,
            vfndotpex_s_r_h: 1,
            vfdotpex_h_b: 1,
            vfdotpex_h_r_b: 1,
            vfndotpex_h_b: 1,
            vfndotpex_h_r_b: 1,
            slli: 1,
            srli: 1,
            srai: 1,
            slliw: 1,
            srliw: 1,
            sraiw: 1,
            dmstat: 1,
            scfgr: 1,
            dmrep: 1,
            hfence_vvma: 1,
            hfence_gvma: 1,
            hsv_b: 1,
            hsv_h: 1,
            hsv_w: 1,
            hsv_d: 1,
            sfence_vma: 1,
            dmsrc: 1,
            dmdst: 1,
            dmstr: 1,
            scfgw: 1,
        }
    }
}
/// CSR
#[derive(Debug, Copy, Clone)]
#[repr(C)]
pub enum Csr {
    Fflags = 0x001,
    Frm = 0x002,
    Fcsr = 0x003,
    Ustatus = 0x000,
    Uie = 0x004,
    Utvec = 0x005,
    Vstart = 0x008,
    Vxsat = 0x009,
    Vxrm = 0x00a,
    Vcsr = 0x00f,
    Uscratch = 0x040,
    Uepc = 0x041,
    Ucause = 0x042,
    Utval = 0x043,
    Uip = 0x044,
    Fmode = 0x800,
    Cycle = 0xc00,
    Time = 0xc01,
    Instret = 0xc02,
    Hpmcounter3 = 0xc03,
    Hpmcounter4 = 0xc04,
    Hpmcounter5 = 0xc05,
    Hpmcounter6 = 0xc06,
    Hpmcounter7 = 0xc07,
    Hpmcounter8 = 0xc08,
    Hpmcounter9 = 0xc09,
    Hpmcounter10 = 0xc0a,
    Hpmcounter11 = 0xc0b,
    Hpmcounter12 = 0xc0c,
    Hpmcounter13 = 0xc0d,
    Hpmcounter14 = 0xc0e,
    Hpmcounter15 = 0xc0f,
    Hpmcounter16 = 0xc10,
    Hpmcounter17 = 0xc11,
    Hpmcounter18 = 0xc12,
    Hpmcounter19 = 0xc13,
    Hpmcounter20 = 0xc14,
    Hpmcounter21 = 0xc15,
    Hpmcounter22 = 0xc16,
    Hpmcounter23 = 0xc17,
    Hpmcounter24 = 0xc18,
    Hpmcounter25 = 0xc19,
    Hpmcounter26 = 0xc1a,
    Hpmcounter27 = 0xc1b,
    Hpmcounter28 = 0xc1c,
    Hpmcounter29 = 0xc1d,
    Hpmcounter30 = 0xc1e,
    Hpmcounter31 = 0xc1f,
    Vl = 0xc20,
    Vtype = 0xc21,
    Vlenb = 0xc22,
    Sstatus = 0x100,
    Sedeleg = 0x102,
    Sideleg = 0x103,
    Sie = 0x104,
    Stvec = 0x105,
    Scounteren = 0x106,
    Sscratch = 0x140,
    Sepc = 0x141,
    Scause = 0x142,
    Stval = 0x143,
    Sip = 0x144,
    Satp = 0x180,
    Vsstatus = 0x200,
    Vsie = 0x204,
    Vstvec = 0x205,
    Vsscratch = 0x240,
    Vsepc = 0x241,
    Vscause = 0x242,
    Vstval = 0x243,
    Vsip = 0x244,
    Vsatp = 0x280,
    Hstatus = 0x600,
    Hedeleg = 0x602,
    Hideleg = 0x603,
    Hie = 0x604,
    Htimedelta = 0x605,
    Hcounteren = 0x606,
    Hgeie = 0x607,
    Htval = 0x643,
    Hip = 0x644,
    Hvip = 0x645,
    Htinst = 0x64a,
    Hgatp = 0x680,
    Hgeip = 0xe12,
    Utvt = 0x007,
    Unxti = 0x045,
    Uintstatus = 0x046,
    Uscratchcsw = 0x048,
    Uscratchcswl = 0x049,
    Stvt = 0x107,
    Snxti = 0x145,
    Sintstatus = 0x146,
    Sscratchcsw = 0x148,
    Sscratchcswl = 0x149,
    Mtvt = 0x307,
    Mnxti = 0x345,
    Mintstatus = 0x346,
    Mscratchcsw = 0x348,
    Mscratchcswl = 0x349,
    Mstatus = 0x300,
    Misa = 0x301,
    Medeleg = 0x302,
    Mideleg = 0x303,
    Mie = 0x304,
    Mtvec = 0x305,
    Mcounteren = 0x306,
    Mcountinhibit = 0x320,
    Mscratch = 0x340,
    Mepc = 0x341,
    Mcause = 0x342,
    Mtval = 0x343,
    Mip = 0x344,
    Mtinst = 0x34a,
    Mtval2 = 0x34b,
    Pmpcfg0 = 0x3a0,
    Pmpcfg1 = 0x3a1,
    Pmpcfg2 = 0x3a2,
    Pmpcfg3 = 0x3a3,
    Pmpaddr0 = 0x3b0,
    Pmpaddr1 = 0x3b1,
    Pmpaddr2 = 0x3b2,
    Pmpaddr3 = 0x3b3,
    Pmpaddr4 = 0x3b4,
    Pmpaddr5 = 0x3b5,
    Pmpaddr6 = 0x3b6,
    Pmpaddr7 = 0x3b7,
    Pmpaddr8 = 0x3b8,
    Pmpaddr9 = 0x3b9,
    Pmpaddr10 = 0x3ba,
    Pmpaddr11 = 0x3bb,
    Pmpaddr12 = 0x3bc,
    Pmpaddr13 = 0x3bd,
    Pmpaddr14 = 0x3be,
    Pmpaddr15 = 0x3bf,
    Tselect = 0x7a0,
    Tdata1 = 0x7a1,
    Tdata2 = 0x7a2,
    Tdata3 = 0x7a3,
    Dcsr = 0x7b0,
    Dpc = 0x7b1,
    Dscratch0 = 0x7b2,
    Dscratch1 = 0x7b3,
    Mcycle = 0xb00,
    Minstret = 0xb02,
    Mhpmcounter3 = 0xb03,
    Mhpmcounter4 = 0xb04,
    Mhpmcounter5 = 0xb05,
    Mhpmcounter6 = 0xb06,
    Mhpmcounter7 = 0xb07,
    Mhpmcounter8 = 0xb08,
    Mhpmcounter9 = 0xb09,
    Mhpmcounter10 = 0xb0a,
    Mhpmcounter11 = 0xb0b,
    Mhpmcounter12 = 0xb0c,
    Mhpmcounter13 = 0xb0d,
    Mhpmcounter14 = 0xb0e,
    Mhpmcounter15 = 0xb0f,
    Mhpmcounter16 = 0xb10,
    Mhpmcounter17 = 0xb11,
    Mhpmcounter18 = 0xb12,
    Mhpmcounter19 = 0xb13,
    Mhpmcounter20 = 0xb14,
    Mhpmcounter21 = 0xb15,
    Mhpmcounter22 = 0xb16,
    Mhpmcounter23 = 0xb17,
    Mhpmcounter24 = 0xb18,
    Mhpmcounter25 = 0xb19,
    Mhpmcounter26 = 0xb1a,
    Mhpmcounter27 = 0xb1b,
    Mhpmcounter28 = 0xb1c,
    Mhpmcounter29 = 0xb1d,
    Mhpmcounter30 = 0xb1e,
    Mhpmcounter31 = 0xb1f,
    Mhpmevent3 = 0x323,
    Mhpmevent4 = 0x324,
    Mhpmevent5 = 0x325,
    Mhpmevent6 = 0x326,
    Mhpmevent7 = 0x327,
    Mhpmevent8 = 0x328,
    Mhpmevent9 = 0x329,
    Mhpmevent10 = 0x32a,
    Mhpmevent11 = 0x32b,
    Mhpmevent12 = 0x32c,
    Mhpmevent13 = 0x32d,
    Mhpmevent14 = 0x32e,
    Mhpmevent15 = 0x32f,
    Mhpmevent16 = 0x330,
    Mhpmevent17 = 0x331,
    Mhpmevent18 = 0x332,
    Mhpmevent19 = 0x333,
    Mhpmevent20 = 0x334,
    Mhpmevent21 = 0x335,
    Mhpmevent22 = 0x336,
    Mhpmevent23 = 0x337,
    Mhpmevent24 = 0x338,
    Mhpmevent25 = 0x339,
    Mhpmevent26 = 0x33a,
    Mhpmevent27 = 0x33b,
    Mhpmevent28 = 0x33c,
    Mhpmevent29 = 0x33d,
    Mhpmevent30 = 0x33e,
    Mhpmevent31 = 0x33f,
    Trace = 0x7d0,
    Mvendorid = 0xf11,
    Marchid = 0xf12,
    Mimpid = 0xf13,
    Mhartid = 0xf14,
    Ssr = 0x7c0,
    Fpmode = 0x7c1,
    Htimedeltah = 0x615,
    Cycleh = 0xc80,
    Timeh = 0xc81,
    Instreth = 0xc82,
    Hpmcounter3h = 0xc83,
    Hpmcounter4h = 0xc84,
    Hpmcounter5h = 0xc85,
    Hpmcounter6h = 0xc86,
    Hpmcounter7h = 0xc87,
    Hpmcounter8h = 0xc88,
    Hpmcounter9h = 0xc89,
    Hpmcounter10h = 0xc8a,
    Hpmcounter11h = 0xc8b,
    Hpmcounter12h = 0xc8c,
    Hpmcounter13h = 0xc8d,
    Hpmcounter14h = 0xc8e,
    Hpmcounter15h = 0xc8f,
    Hpmcounter16h = 0xc90,
    Hpmcounter17h = 0xc91,
    Hpmcounter18h = 0xc92,
    Hpmcounter19h = 0xc93,
    Hpmcounter20h = 0xc94,
    Hpmcounter21h = 0xc95,
    Hpmcounter22h = 0xc96,
    Hpmcounter23h = 0xc97,
    Hpmcounter24h = 0xc98,
    Hpmcounter25h = 0xc99,
    Hpmcounter26h = 0xc9a,
    Hpmcounter27h = 0xc9b,
    Hpmcounter28h = 0xc9c,
    Hpmcounter29h = 0xc9d,
    Hpmcounter30h = 0xc9e,
    Hpmcounter31h = 0xc9f,
    Mstatush = 0x310,
    Mcycleh = 0xb80,
    Minstreth = 0xb82,
    Mhpmcounter3h = 0xb83,
    Mhpmcounter4h = 0xb84,
    Mhpmcounter5h = 0xb85,
    Mhpmcounter6h = 0xb86,
    Mhpmcounter7h = 0xb87,
    Mhpmcounter8h = 0xb88,
    Mhpmcounter9h = 0xb89,
    Mhpmcounter10h = 0xb8a,
    Mhpmcounter11h = 0xb8b,
    Mhpmcounter12h = 0xb8c,
    Mhpmcounter13h = 0xb8d,
    Mhpmcounter14h = 0xb8e,
    Mhpmcounter15h = 0xb8f,
    Mhpmcounter16h = 0xb90,
    Mhpmcounter17h = 0xb91,
    Mhpmcounter18h = 0xb92,
    Mhpmcounter19h = 0xb93,
    Mhpmcounter20h = 0xb94,
    Mhpmcounter21h = 0xb95,
    Mhpmcounter22h = 0xb96,
    Mhpmcounter23h = 0xb97,
    Mhpmcounter24h = 0xb98,
    Mhpmcounter25h = 0xb99,
    Mhpmcounter26h = 0xb9a,
    Mhpmcounter27h = 0xb9b,
    Mhpmcounter28h = 0xb9c,
    Mhpmcounter29h = 0xb9d,
    Mhpmcounter30h = 0xb9e,
    Mhpmcounter31h = 0xb9f,
}
