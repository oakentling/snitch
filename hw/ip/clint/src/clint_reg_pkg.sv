// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package clint_reg_pkg;

  // Param list
  parameter int NumCores = 2;

  // Address widths within the block
  parameter int BlockAw = 16;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } clint_reg2hw_msip_mreg_t;

  typedef struct packed {
    logic        q;
  } clint_reg2hw_dummy_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_low0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_high0_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_low1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtimecmp_high1_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtime_low_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } clint_reg2hw_mtime_high_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } clint_reg2hw_msip_clr_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } clint_reg2hw_msip_bcast_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } clint_hw2reg_msip_mreg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } clint_hw2reg_dummy_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } clint_hw2reg_mtime_low_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } clint_hw2reg_mtime_high_reg_t;

  // Register -> HW type
  typedef struct packed {
    clint_reg2hw_msip_mreg_t [1:0] msip; // [229:228]
    clint_reg2hw_dummy_reg_t dummy; // [227:227]
    clint_reg2hw_mtimecmp_low0_reg_t mtimecmp_low0; // [226:195]
    clint_reg2hw_mtimecmp_high0_reg_t mtimecmp_high0; // [194:163]
    clint_reg2hw_mtimecmp_low1_reg_t mtimecmp_low1; // [162:131]
    clint_reg2hw_mtimecmp_high1_reg_t mtimecmp_high1; // [130:99]
    clint_reg2hw_mtime_low_reg_t mtime_low; // [98:67]
    clint_reg2hw_mtime_high_reg_t mtime_high; // [66:35]
    clint_reg2hw_msip_clr_reg_t msip_clr; // [34:2]
    clint_reg2hw_msip_bcast_reg_t msip_bcast; // [1:0]
  } clint_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    clint_hw2reg_msip_mreg_t [1:0] msip; // [71:68]
    clint_hw2reg_dummy_reg_t dummy; // [67:66]
    clint_hw2reg_mtime_low_reg_t mtime_low; // [65:33]
    clint_hw2reg_mtime_high_reg_t mtime_high; // [32:0]
  } clint_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] CLINT_MSIP_OFFSET = 16'h 0;
  parameter logic [BlockAw-1:0] CLINT_DUMMY_OFFSET = 16'h 4;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_LOW0_OFFSET = 16'h 4000;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_HIGH0_OFFSET = 16'h 4004;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_LOW1_OFFSET = 16'h 4008;
  parameter logic [BlockAw-1:0] CLINT_MTIMECMP_HIGH1_OFFSET = 16'h 400c;
  parameter logic [BlockAw-1:0] CLINT_MTIME_LOW_OFFSET = 16'h bff8;
  parameter logic [BlockAw-1:0] CLINT_MTIME_HIGH_OFFSET = 16'h bffc;
  parameter logic [BlockAw-1:0] CLINT_MSIP_CLR_OFFSET = 16'h c000;
  parameter logic [BlockAw-1:0] CLINT_MSIP_BCAST_OFFSET = 16'h c004;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] CLINT_MSIP_CLR_RESVAL = 32'h 0;
  parameter logic [0:0] CLINT_MSIP_BCAST_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    CLINT_MSIP,
    CLINT_DUMMY,
    CLINT_MTIMECMP_LOW0,
    CLINT_MTIMECMP_HIGH0,
    CLINT_MTIMECMP_LOW1,
    CLINT_MTIMECMP_HIGH1,
    CLINT_MTIME_LOW,
    CLINT_MTIME_HIGH,
    CLINT_MSIP_CLR,
    CLINT_MSIP_BCAST
  } clint_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] CLINT_PERMIT [10] = '{
    4'b 0001, // index[0] CLINT_MSIP
    4'b 0001, // index[1] CLINT_DUMMY
    4'b 1111, // index[2] CLINT_MTIMECMP_LOW0
    4'b 1111, // index[3] CLINT_MTIMECMP_HIGH0
    4'b 1111, // index[4] CLINT_MTIMECMP_LOW1
    4'b 1111, // index[5] CLINT_MTIMECMP_HIGH1
    4'b 1111, // index[6] CLINT_MTIME_LOW
    4'b 1111, // index[7] CLINT_MTIME_HIGH
    4'b 1111, // index[8] CLINT_MSIP_CLR
    4'b 0001  // index[9] CLINT_MSIP_BCAST
  };

endpackage

